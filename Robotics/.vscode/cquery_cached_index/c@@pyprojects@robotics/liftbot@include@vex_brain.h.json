16
{"last_modification_time":1598558486,"language":2,"import_file":"c:/pyprojects/robotics/liftbot/src/main.cpp","args_hash":9702252571785421998,"includes":[{"line":16,"resolved_path":"c:/pyprojects/robotics/liftbot/include/vex_triport.h"},{"line":17,"resolved_path":"c:/pyprojects/robotics/liftbot/include/vex_timer.h"},{"line":18,"resolved_path":"c:/pyprojects/robotics/liftbot/include/vex_global.h"}],"dependencies":["c:/pyprojects/robotics/liftbot/src/main.cpp","c:/pyprojects/robotics/liftbot/include/vex.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/math.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_math.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/sal.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_stdio_config.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_malloc.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_search.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stddef.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/limits.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memory.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memcpy_s.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/errno.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime_string.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h","c:/pyprojects/robotics/liftbot/include/v5.h","c:/pyprojects/robotics/liftbot/include/v5_api.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/stdint.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/stdarg.h","c:/pyprojects/robotics/liftbot/include/v5_apitypes.h","c:/pyprojects/robotics/liftbot/include/v5_apiuser.h","c:/pyprojects/robotics/liftbot/include/v5_vcs.h","c:/pyprojects/robotics/liftbot/include/v5_cpp.h","c:/pyprojects/robotics/liftbot/include/vex_thread.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/chrono","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/yvals_core.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xkeycheck.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/limits","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cfloat","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/float.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/climits","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cwchar","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cstdio","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/wchar.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wconio.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wctype.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wdirect.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wio.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wprocess.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wtime.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/sys/stat.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/intrin0.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/intrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/setjmp.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/immintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/wmmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/nmmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/smmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/tmmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/pmmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/emmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xmmintrin.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/malloc.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xstddef","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cstddef","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xtr1common","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cstdlib","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/initializer_list","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/ratio","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/type_traits","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/time.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/utility","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xtimec.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/yvals.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/crtdbg.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime_new_debug.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime_new.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/crtdefs.h","c:/pyprojects/robotics/liftbot/include/vex_device.h","c:/pyprojects/robotics/liftbot/include/vex_controller.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/functional","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/exception","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime_exception.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/eh.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_terminate.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/tuple","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/new","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xutility","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cstring","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/typeinfo","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime_typeinfo.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xmemory","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cstdint","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xatomic.h","c:/pyprojects/robotics/liftbot/include/vex_drivetrain.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vadefs.h","c:/pyprojects/robotics/liftbot/include/vex_task.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/sys/types.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/mmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/zmmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/ammintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/isa_availability.h","c:/pyprojects/robotics/liftbot/include/vex_event.h","c:/pyprojects/robotics/liftbot/include/vex_mevent.h","c:/pyprojects/robotics/liftbot/include/vex_units.h","c:/pyprojects/robotics/liftbot/include/vex_color.h","c:/pyprojects/robotics/liftbot/include/vex_motor.h","c:/pyprojects/robotics/liftbot/include/vex_vision.h","c:/pyprojects/robotics/liftbot/include/vex_imu.h","c:/pyprojects/robotics/liftbot/include/vex_rotation.h","c:/pyprojects/robotics/liftbot/include/vex_optical.h","c:/pyprojects/robotics/liftbot/include/vex_distance.h","c:/pyprojects/robotics/liftbot/include/vex_electromag.h","c:/pyprojects/robotics/liftbot/include/vex_triport.h","c:/pyprojects/robotics/liftbot/include/vex_timer.h","c:/pyprojects/robotics/liftbot/include/vex_global.h","c:/pyprojects/robotics/liftbot/include/vex_competition.h","c:/pyprojects/robotics/liftbot/include/vex_motorgroup.h","c:/pyprojects/robotics/liftbot/include/vex_smartdrive.h","c:/pyprojects/robotics/liftbot/include/vex_vexlink.h","c:/pyprojects/robotics/liftbot/include/robot-config.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/concurrencysal.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/stdbool.h","c:/pyprojects/robotics/liftbot/include/v5_color.h","c:/pyprojects/robotics/liftbot/include/v5_apiprivate.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_share.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/use_ansi.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":8368589376327801919,"detailed_name":"vex","short_name_offset":0,"short_name_size":3,"kind":3,"hover":"","comments":"","declarations":[],"spell":"26:11-26:14|-1|1|2","extent":"26:1-952:2|-1|1|0","bases":[1],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["26:11-26:14|-1|1|4","791:7-791:10|2|2|4"]},{"id":1,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[0],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":2,"usr":15904545360931266348,"detailed_name":"vex::brain","short_name_offset":5,"short_name_size":5,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use the brain class to see battery information, SD card information, or write to the Screen.","declarations":["47:7-47:12|-1|1|4","48:8-48:13|-1|1|4"],"spell":"31:9-31:14|0|2|2","extent":"31:3-951:4|0|2|0","bases":[],"derived":[],"types":[],"funcs":[0,1,2,77,78,79],"vars":[34,35,36,41,42],"instances":[],"uses":["47:7-47:12|2|2|4","731:41-731:46|-1|1|4","732:41-732:46|-1|1|4"]},{"id":3,"usr":11542247373910175074,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":["32:18-32:29|-1|1|4"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":4,"usr":11353837028888530222,"detailed_name":"int32_t","short_name_offset":0,"short_name_size":7,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,3,4,5,6,7,8],"uses":["37:14-37:21|-1|1|4","60:11-60:18|-1|1|4","61:11-61:18|-1|1|4","62:11-62:18|-1|1|4","64:11-64:18|-1|1|4","65:11-65:18|-1|1|4","66:11-66:18|-1|1|4","68:11-68:18|-1|1|4","74:11-74:18|-1|1|4","74:33-74:40|-1|1|4","75:11-75:18|-1|1|4","75:33-75:40|-1|1|4","105:31-105:38|-1|1|4","105:44-105:51|-1|1|4","134:31-134:38|-1|1|4","134:42-134:49|-1|1|4","144:11-144:18|-1|1|4","153:11-153:18|-1|1|4","232:11-232:18|-1|1|4","241:11-241:18|-1|1|4","290:29-290:36|-1|1|4","290:40-290:47|-1|1|4","303:29-303:36|-1|1|4","303:40-303:47|-1|1|4","613:11-613:18|-1|1|4","622:11-622:18|-1|1|4","904:11-904:18|-1|1|4","904:63-904:70|-1|1|4","916:11-916:18|-1|1|4","916:63-916:70|-1|1|4","928:11-928:18|-1|1|4","928:65-928:72|-1|1|4","935:11-935:18|-1|1|4"]},{"id":5,"usr":14327379822437551892,"detailed_name":"vex::brain::tEventType","short_name_offset":12,"short_name_size":10,"kind":10,"hover":"","comments":"","declarations":[],"spell":"50:18-50:28|2|2|2","extent":"50:7-53:8|2|2|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["731:66-731:76|-1|1|4","732:66-732:76|-1|1|4"]},{"id":6,"usr":11666197909639983241,"detailed_name":"vex::brain::lcd","short_name_offset":12,"short_name_size":3,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class to write or draw to the brain's LCD screen.","declarations":["94:11-94:14|-1|1|4","95:12-95:15|-1|1|4"],"spell":"58:13-58:16|2|2|2","extent":"58:7-752:8|2|2|0","bases":[],"derived":[],"types":[],"funcs":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76],"vars":[2,3,4,5,6,7,8,9,10,11,12,13,29,30],"instances":[35],"uses":["94:11-94:14|6|2|4","799:7-799:10|-1|1|4"]},{"id":7,"usr":16199156163178427820,"detailed_name":"uint32_t","short_name_offset":0,"short_name_size":8,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[9],"uses":["70:11-70:19|-1|1|4","124:33-124:41|-1|1|4","705:41-705:49|-1|1|4","731:32-731:40|-1|1|4","732:32-732:40|-1|1|4","735:34-735:42|-1|1|4","736:35-736:43|-1|1|4","737:34-737:42|-1|1|4","738:44-738:52|-1|1|4","739:73-739:81|-1|1|4","740:59-740:67|-1|1|4","750:11-750:19|-1|1|4","751:11-751:19|-1|1|4","751:31-751:39|-1|1|4","825:11-825:19|-1|1|4"]},{"id":8,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[10],"uses":[]},{"id":9,"usr":3,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[11],"uses":[]},{"id":10,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[12,13],"uses":[]},{"id":11,"usr":419745744806346318,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["115:29-115:37|-1|1|4"]},{"id":12,"usr":15323221912845768671,"detailed_name":"T","short_name_offset":0,"short_name_size":1,"kind":26,"hover":"","comments":"","declarations":[],"spell":"157:27-157:28|13|3|2","extent":"157:21-157:28|13|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["158:33-158:34|-1|1|4"]},{"id":13,"usr":16964274054042786425,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["170:39-170:44|-1|1|4","205:40-205:45|-1|1|4","325:39-325:44|-1|1|4","367:49-367:54|-1|1|4","475:78-475:83|-1|1|4","542:64-542:69|-1|1|4"]},{"id":14,"usr":5460748554573931332,"detailed_name":"T","short_name_offset":0,"short_name_size":1,"kind":26,"hover":"","comments":"","declarations":[],"spell":"192:27-192:28|17|3|2","extent":"192:21-192:28|17|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["193:34-193:35|-1|1|4"]},{"id":15,"usr":13146203922837006192,"detailed_name":"T","short_name_offset":0,"short_name_size":1,"kind":26,"hover":"","comments":"","declarations":[],"spell":"253:27-253:28|23|3|2","extent":"253:21-253:28|23|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["254:27-254:28|-1|1|4"]},{"id":16,"usr":1427560950799459770,"detailed_name":"T","short_name_offset":0,"short_name_size":1,"kind":26,"hover":"","comments":"","declarations":[],"spell":"305:27-305:28|28|3|2","extent":"305:21-305:28|28|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["306:33-306:34|-1|1|4"]},{"id":17,"usr":6739748888343438551,"detailed_name":"T1","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"345:27-345:29|33|3|2","extent":"345:21-345:29|33|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["346:31-346:33|-1|1|4"]},{"id":18,"usr":6993191309053230921,"detailed_name":"C","short_name_offset":0,"short_name_size":1,"kind":26,"hover":"","comments":"","declarations":[],"spell":"345:37-345:38|33|3|2","extent":"345:31-345:38|33|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["346:42-346:43|-1|1|4"]},{"id":19,"usr":10312111212617678222,"detailed_name":"T1","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"438:27-438:29|42|3|2","extent":"438:21-438:29|42|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["439:35-439:37|-1|1|4"]},{"id":20,"usr":14450796519442806289,"detailed_name":"T2","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"438:37-438:39|42|3|2","extent":"438:31-438:39|42|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["439:41-439:43|-1|1|4"]},{"id":21,"usr":107701263107897490,"detailed_name":"T3","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"438:47-438:49|42|3|2","extent":"438:41-438:49|42|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["439:47-439:49|-1|1|4"]},{"id":22,"usr":5323259338228588901,"detailed_name":"T4","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"438:57-438:59|42|3|2","extent":"438:51-438:59|42|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["439:57-439:59|-1|1|4"]},{"id":23,"usr":18170425549893906932,"detailed_name":"C","short_name_offset":0,"short_name_size":1,"kind":26,"hover":"","comments":"","declarations":[],"spell":"438:67-438:68|42|3|2","extent":"438:61-438:68|42|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["439:68-439:69|-1|1|4"]},{"id":24,"usr":7457792533795566904,"detailed_name":"T1","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"507:27-507:29|47|3|2","extent":"507:21-507:29|47|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["508:32-508:34|-1|1|4"]},{"id":25,"usr":14331888412341496031,"detailed_name":"T2","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"507:37-507:39|47|3|2","extent":"507:31-507:39|47|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["508:38-508:40|-1|1|4"]},{"id":26,"usr":16647895935986487960,"detailed_name":"T3","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"507:47-507:49|47|3|2","extent":"507:41-507:49|47|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["508:44-508:46|-1|1|4"]},{"id":27,"usr":17855960092036019494,"detailed_name":"C","short_name_offset":0,"short_name_size":1,"kind":26,"hover":"","comments":"","declarations":[],"spell":"507:57-507:58|47|3|2","extent":"507:51-507:58|47|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["508:55-508:56|-1|1|4"]},{"id":28,"usr":12339929197612516034,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["683:41-683:48|-1|1|4","748:50-748:57|-1|1|4","904:46-904:53|-1|1|4","916:46-916:53|-1|1|4","928:48-928:55|-1|1|4"]},{"id":29,"usr":5609722413052049945,"detailed_name":"vex::mevent","short_name_offset":5,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[29,30],"uses":["731:11-731:17|-1|1|4","732:11-732:17|-1|1|4"]},{"id":30,"usr":7844815882902256942,"detailed_name":"vex::brain::lcd::tImageBufferType","short_name_offset":17,"short_name_size":16,"kind":10,"hover":"","comments":"","declarations":[],"spell":"742:22-742:38|6|2|2","extent":"742:11-746:12|6|2|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["748:11-748:27|-1|1|4"]},{"id":31,"usr":15601941847586243462,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["764:26-764:35|-1|1|4","783:43-783:52|-1|1|4"]},{"id":32,"usr":110500169919833342,"detailed_name":"vex::timer","short_name_offset":5,"short_name_size":5,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[34],"uses":["791:12-791:17|-1|1|4"]},{"id":33,"usr":3769340180355582632,"detailed_name":"vex::triport","short_name_offset":5,"short_name_size":7,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[36],"uses":["806:7-806:14|-1|1|4","806:35-806:42|-1|1|4"]},{"id":34,"usr":9735760040760725733,"detailed_name":"vex::brain::battery","short_name_offset":12,"short_name_size":7,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use the battery class to see information about the battery.","declarations":["814:11-814:18|-1|1|4","815:12-815:19|-1|1|4"],"spell":"812:13-812:20|2|2|2","extent":"812:7-867:8|2|2|0","bases":[],"derived":[],"types":[],"funcs":[81,82,83,84,85,86,87],"vars":[],"instances":[41],"uses":["814:11-814:18|34|2|4","874:7-874:14|-1|1|4"]},{"id":35,"usr":13233960938812283541,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["825:31-825:43|-1|1|4","825:52-825:64|-1|1|4","835:34-835:46|-1|1|4","835:55-835:67|-1|1|4"]},{"id":36,"usr":6886972144391420033,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["845:34-845:50|-1|1|4"]},{"id":37,"usr":3040865924321144759,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["855:30-855:42|-1|1|4","855:51-855:63|-1|1|4"]},{"id":38,"usr":5167826673387378352,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["865:30-865:42|-1|1|4","865:51-865:63|-1|1|4"]},{"id":39,"usr":15490720821126388027,"detailed_name":"vex::brain::sdcard","short_name_offset":12,"short_name_size":6,"kind":5,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@brief Use the SD Card class to load or save files on your SD card.","declarations":["882:11-882:17|-1|1|4","883:12-883:18|-1|1|4"],"spell":"880:13-880:19|2|2|2","extent":"880:7-943:8|2|2|0","bases":[],"derived":[],"types":[],"funcs":[88,89,90,91,92,93,94,95],"vars":[],"instances":[42],"uses":["882:11-882:17|39|2|4","950:7-950:13|-1|1|4"]}],"funcs":[{"id":0,"usr":546190953179590640,"detailed_name":"int32_t vex::brain::_getIndex()","short_name_offset":20,"short_name_size":9,"kind":254,"storage":3,"hover":"","comments":"","declarations":[{"spell":"37:22-37:31|2|2|1","param_spellings":[]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":["731:48-731:57|6|2|32","732:48-732:57|6|2|32"],"callees":[]},{"id":1,"usr":12054084580302515170,"detailed_name":"void vex::brain::brain()","short_name_offset":10,"short_name_size":5,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::brain Brain = vex::brain();}\r\n@brief Creates a new brain object.","declarations":[{"spell":"47:7-47:12|2|2|1","param_spellings":[]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":5607517747870690275,"detailed_name":"void vex::brain::~brain()","short_name_offset":17,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"48:7-48:13|2|2|1","param_spellings":[]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":8666646521183656084,"detailed_name":"int32_t vex::brain::lcd::rowToPixel(int32_t row)","short_name_offset":25,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"74:21-74:31|6|2|1","param_spellings":["74:41-74:44"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":14150274132345898327,"detailed_name":"int32_t vex::brain::lcd::colToPixel(int32_t col)","short_name_offset":25,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"75:21-75:31|6|2|1","param_spellings":["75:41-75:44"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":2703189958459629523,"detailed_name":"void vex::brain::lcd::lcd()","short_name_offset":17,"short_name_size":3,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"94:11-94:14|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":11138515763611672453,"detailed_name":"void vex::brain::lcd::~lcd() noexcept","short_name_offset":22,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"95:11-95:15|6|2|2","extent":"95:11-95:20|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":11256976126007097477,"detailed_name":"void vex::brain::lcd::setCursor(int32_t row, int32_t col)","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{setCursor(1,1);}\r\n@brief Sets the cursor to the row and column number set in the parameters.\r\n@param row Sets the row number for where the cursor is placed.\r\n@param col Sets the column number for where the cursor is placed.","declarations":[{"spell":"105:20-105:29|6|2|1","param_spellings":["105:39-105:42","105:52-105:55"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":9571725437390409506,"detailed_name":"void vex::brain::lcd::setFont(vex::fontType font)","short_name_offset":22,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{setFont(mono20);}\r\n@cpp_sig{setFont(vex::fontType::mono20);}\r\n@brief Sets the font type to be displayed on the Screen that is determined by the parameter.\r\n@param font The type of font that is displayed.","declarations":[{"spell":"115:20-115:27|6|2|1","param_spellings":["115:38-115:42"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":6611812448224607449,"detailed_name":"void vex::brain::lcd::setPenWidth(uint32_t width)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{setPenWidth(5);}\r\n@brief Sets the pen's width.\r\n@param width This represents the width of the pen when drawing. A larger width equals a wider pen stroke.","declarations":[{"spell":"124:20-124:31|6|2|1","param_spellings":["124:42-124:47"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":881910241579796796,"detailed_name":"void vex::brain::lcd::setOrigin(int32_t x, int32_t y)","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{setOrigin(1,1);}\r\n@brief Sets the origin of the screen to the parameters defined in the function.\r\n@param x The x location of the origin.\r\n@param y The y location of the origin.","declarations":[{"spell":"134:20-134:29|6|2|1","param_spellings":["134:39-134:40","134:50-134:51"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":12550249538453708182,"detailed_name":"int32_t vex::brain::lcd::column()","short_name_offset":25,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{column()}\r\n@brief An integer that tracks the current cursor position's column, starting at 1.\r\n@return Returns an integer that tracks the current cursor position's column, starting at 1.","declarations":[{"spell":"144:20-144:26|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":5833106136242192145,"detailed_name":"int32_t vex::brain::lcd::row()","short_name_offset":25,"short_name_size":3,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{row()}\r\n@brief An integer that tracks the current cursor position's row, starting at 1.\r\n@return Returns an integer that tracks the current cursor position's row, starting at 1.","declarations":[{"spell":"153:20-153:23|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":10548252811152041693,"detailed_name":"void vex::brain::lcd::setPenColor(T color)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"158:20-158:31|6|2|2","extent":"158:11-158:42|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[14],"uses":[],"callees":[]},{"id":14,"usr":17729165341271620711,"detailed_name":"void vex::brain::lcd::setPenColor(const vex::color &color)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{setPenColor(red);}\r\n@cpp_sig{setPenColor(vex::color::red);}\r\n@brief Sets the color of the pen to a specified color.\r\n@param color A color unit where colors can be defined as names.","declarations":[{"spell":"170:20-170:31|6|2|1","param_spellings":["170:46-170:51"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":16787837308473176154,"detailed_name":"void vex::brain::lcd::setPenColor(const char *color)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{setting}\r\n@block_sig{setPenColor(\"#FF0000\");}\r\n@brief Sets the color of the pen to a specified color using a hex value.\r\n@param color A hexadecimal value that represents color.","declarations":[{"spell":"179:20-179:31|6|2|1","param_spellings":["179:45-179:50"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":124032808505022303,"detailed_name":"void vex::brain::lcd::setPenColor(int hue)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{setting}\r\n@block_sig{setPenColor(50);}\r\n@brief Sets the color of the pen to a specified color.\r\n@param hue The integer represents the hue of the color.","declarations":[{"spell":"188:20-188:31|6|2|1","param_spellings":["188:37-188:40"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":3912036452570217838,"detailed_name":"void vex::brain::lcd::setFillColor(T color)","short_name_offset":22,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"193:20-193:32|6|2|2","extent":"193:11-193:43|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[15],"uses":[],"callees":[]},{"id":18,"usr":8479654234682368706,"detailed_name":"void vex::brain::lcd::setFillColor(const vex::color &color)","short_name_offset":22,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{setFillColor(red);}\r\n@cpp_sig{setFillColor(vex::color::red);}\r\n@brief Sets the default fill color for any subsequent draw command.\r\n@param color In a color unit, colors can be defined as names.","declarations":[{"spell":"205:20-205:32|6|2|1","param_spellings":["205:47-205:52"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":8284283579810884822,"detailed_name":"void vex::brain::lcd::setFillColor(const char *color)","short_name_offset":22,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{setting}\r\n@block_sig{setFillColor(\"#FF0000\");}\r\n@brief Sets the default fill color for any subsequent draw command..\r\n@param color A hexadecimal value that represents color.","declarations":[{"spell":"214:20-214:32|6|2|1","param_spellings":["214:46-214:51"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":17197548173303382271,"detailed_name":"void vex::brain::lcd::setFillColor(int hue)","short_name_offset":22,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{setting}\r\n@block_sig{setFillColor(50);}\r\n@brief Sets the default fill color for any subsequent draw command.\r\n@param hue The integer represents the hue of the color.","declarations":[{"spell":"223:20-223:32|6|2|1","param_spellings":["223:38-223:41"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":17878219409444056164,"detailed_name":"int32_t vex::brain::lcd::getStringWidth(const char *cstr)","short_name_offset":25,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{getStringWidth(\"Hello World\")}\r\n@brief Gets the width in pixels of the given string.\r\n@return Returns an integer that represents the width of the string in pixels.","declarations":[{"spell":"232:20-232:34|6|2|1","param_spellings":["232:48-232:52"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":12344261024719721564,"detailed_name":"int32_t vex::brain::lcd::getStringHeight(const char *cstr)","short_name_offset":25,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{getStringHeight(\"Hello World\")}\r\n@brief Gets the height in pixels of the given string.\r\n@return Returns an integer that represents the height of the string in pixels.","declarations":[{"spell":"241:20-241:35|6|2|1","param_spellings":["241:49-241:53"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":2234162852039764867,"detailed_name":"void vex::brain::lcd::print(T value)","short_name_offset":22,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block}\r\n@drawer_cat{action}\r\n@block_sig{print(\"Hello\");}\r\n@brief Prints a number, string, or Boolean.\r\n@param value Information to display on the screen.\r\n@parameter_defaults_overrides{\"Hello\"|1|true}\r\n@parameter_type_overrides{string|number|boolean}\r\n@parameter_identifier_overrides{value|value|value}","declarations":[],"spell":"254:20-254:25|6|2|2","extent":"254:11-254:36|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[16],"uses":[],"callees":[]},{"id":24,"usr":14068014868064387687,"detailed_name":"void vex::brain::lcd::print(const char *format, ...)","short_name_offset":22,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{print(\"Hello\");}\r\n@brief Prints a number, string, or Boolean.\r\n@param format This is a reference to a char format that prints the value of variables.\r\n@param ... A variable list of parameters to insert into format string.","declarations":[{"spell":"277:20-277:25|6|2|1","param_spellings":["277:39-277:45"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":2192996649328418929,"detailed_name":"void vex::brain::lcd::print(char *format, ...)","short_name_offset":22,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"278:20-278:25|6|2|1","param_spellings":["278:33-278:39"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":6048732449822804177,"detailed_name":"void vex::brain::lcd::printAt(int32_t x, int32_t y, const char *format, ...)","short_name_offset":22,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{printAt(1,40,\"Hello\");}\r\n@brief Prints a number, string, or Boolean at an x, y pixel location.\r\n@param x The x-coordinate at which to print a message on the screen.\r\n@param y The y-coordinate at which to print a message on the screen.\r\n@param format A reference to a char format to print the value of variables.\r\n@param ... A variable list of parameters to insert into format string.","declarations":[{"spell":"290:20-290:27|6|2|1","param_spellings":["290:37-290:38","290:48-290:49","290:63-290:69"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":4306679318023441239,"detailed_name":"void vex::brain::lcd::printAt(int32_t x, int32_t y, bool bOpaque, const char *format, ...)","short_name_offset":22,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{printAt(1,40,true,\"Hello\");}\r\n@brief Prints a number, string, or Boolean at an x, y pixel location with the ability to be transparent.\r\n@param x The x pixel location where the print should start\r\n@param y The y pixel location where the print should start\r\n@param bOpaque If set to false, the print will be transparent.\r\n@param format A reference to a char format to print the value of variables.\r\n@param ... A variable list of parameters to insert into format string.","declarations":[{"spell":"303:20-303:27|6|2|1","param_spellings":["303:37-303:38","303:48-303:49","303:56-303:63","303:77-303:83"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":9166100936161213533,"detailed_name":"void vex::brain::lcd::clearScreen(T color)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"306:20-306:31|6|2|2","extent":"306:11-306:42|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[17],"uses":[],"callees":[]},{"id":29,"usr":14525262263351170055,"detailed_name":"void vex::brain::lcd::clearScreen()","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{clearScreen();}\r\n@brief Clears the whole Screen to a default color or otherwise specified color.","declarations":[{"spell":"316:20-316:31|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":11190158383537351474,"detailed_name":"void vex::brain::lcd::clearScreen(const vex::color &color)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{clearScreen(vex::color::red);}\r\n@brief Clears the whole Screen to a default color or otherwise specified color.\r\n@param color In a color unit, colors can be defined as names.","declarations":[{"spell":"325:20-325:31|6|2|1","param_spellings":["325:46-325:51"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":12476499620010683493,"detailed_name":"void vex::brain::lcd::clearScreen(const char *color)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{clearScreen(\"#FF0000\");}\r\n@brief Clears the whole Screen to a default color or otherwise specified color.\r\n@param color A hexadecimal value that represents color.","declarations":[{"spell":"334:20-334:31|6|2|1","param_spellings":["334:45-334:50"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":15050443355721576413,"detailed_name":"void vex::brain::lcd::clearScreen(int hue)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{clearScreen(50);}\r\n@brief Clears the whole Screen to a default color or otherwise specified color.\r\n@param hue The integer represents the hue of the color.","declarations":[{"spell":"343:20-343:31|6|2|1","param_spellings":["343:37-343:40"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":488274087724246487,"detailed_name":"void vex::brain::lcd::clearLine(T1 number, C color)","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"346:20-346:29|6|2|2","extent":"346:11-346:51|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[18,19],"uses":[],"callees":[]},{"id":34,"usr":14249883959491126858,"detailed_name":"void vex::brain::lcd::clearLine(int number, const vex::color &color)","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{clearLine(1,vex::color::red);}\r\n@brief Clears the specified line and sets it to a specified color.\r\n@param number The integer sets the line that is to be cleared.\r\n@param color A color unit where colors can be defined as names.","declarations":[{"spell":"367:20-367:29|6|2|1","param_spellings":["367:35-367:41","367:56-367:61"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":2760919064166555906,"detailed_name":"void vex::brain::lcd::clearLine(int number, const char *color)","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{clearLine(1,\"#FF0000\");}\r\n@brief Clears the specified line and sets it to a specified color.\r\n@param number The integer sets the line that is to be cleared.\r\n@param color A hexadecimal value that represents color.","declarations":[{"spell":"377:20-377:29|6|2|1","param_spellings":["377:35-377:41","377:55-377:60"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":12147746842333956021,"detailed_name":"void vex::brain::lcd::clearLine(int number, int hue)","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{clearLine(1, 50);}\r\n@brief Clears the specified line and sets it to a specified color.\r\n@param number The integer sets the line that is to be cleared.\r\n@param hue An integer that represents the hue of the color.","declarations":[{"spell":"387:20-387:29|6|2|1","param_spellings":["387:35-387:41","387:47-387:50"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":14230355565672331478,"detailed_name":"void vex::brain::lcd::clearLine(int number)","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{clearLine(1);}\r\n@brief Clears the specified line and sets it to the background color.\r\n@param number The integer sets the line that is to be cleared.","declarations":[{"spell":"396:20-396:29|6|2|1","param_spellings":["396:35-396:41"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":2358719493167306107,"detailed_name":"void vex::brain::lcd::clearLine()","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{clearLine();}\r\n@brief Clears the rest of the line from where the cursor is located.","declarations":[{"spell":"404:20-404:29|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":8910608642015570781,"detailed_name":"void vex::brain::lcd::newLine()","short_name_offset":22,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{newLine();}\r\n@brief Clears the rest of the line from where the cursor is located and then moves the cursor to the beginning of the next line.","declarations":[{"spell":"412:20-412:27|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":8602715344717445971,"detailed_name":"void vex::brain::lcd::drawPixel(int x, int y)","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{drawPixel(50,50);}\r\n@brief Draws a single pixel to the screen in the specified x and y location.\r\n@param x The x location of where to draw the pixel.\r\n@param y The y location of where to draw the pixel.","declarations":[{"spell":"423:20-423:29|6|2|1","param_spellings":["423:35-423:36","423:42-423:43"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":8734534429393170146,"detailed_name":"void vex::brain::lcd::drawLine(int x1, int y1, int x2, int y2)","short_name_offset":22,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{drawLine(1,1,50,50);}\r\n@brief Draws a line connecting the two specified points in the parameters.\r\n@param x1 The x location of the first point.\r\n@param y1 The y location of the first point.\r\n@param x2 The x location of the second point.\r\n@param y2 The y location of the second point.","declarations":[{"spell":"435:20-435:28|6|2|1","param_spellings":["435:34-435:36","435:42-435:44","435:50-435:52","435:58-435:60"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":42,"usr":16487048552076101962,"detailed_name":"void vex::brain::lcd::drawRectangle(T1 x, T2 y, T3 width, T4 height, C color)","short_name_offset":22,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"439:20-439:33|6|2|2","extent":"439:11-439:77|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[20,21,22,23,24],"uses":[],"callees":[]},{"id":43,"usr":7930887523914491966,"detailed_name":"void vex::brain::lcd::drawRectangle(int x, int y, int width, int height)","short_name_offset":22,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{drawRectangle(1,1, 50, 20);}\r\n@brief Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the current pen and fill color.\r\n@param x The x-coordinate at which the left edge of the rectangle will be drawn on the screen.\r\n@param y The y-coordinate at which the top edge of the rectangle will be drawn on the screen.\r\n@param width The width of the rectangle.\r\n@param height The height of the rectangle.","declarations":[{"spell":"462:20-462:33|6|2|1","param_spellings":["462:39-462:40","462:46-462:47","462:53-462:58","462:64-462:70"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":44,"usr":7403256748370960267,"detailed_name":"void vex::brain::lcd::drawRectangle(int x, int y, int width, int height, const vex::color &color)","short_name_offset":22,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{drawRectangle(1,1,50,20,vex::color::red);}\r\n@brief Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the color specified.\r\n@param x The x-coordinate at which the left edge of the rectangle will be drawn on the screen.\r\n@param y The y-coordinate at which the top edge of the rectangle will be drawn on the screen.\r\n@param width The width of the rectangle.\r\n@param height The height of the rectangle.\r\n@param color A color unit where colors can be defined as names.","declarations":[{"spell":"475:20-475:33|6|2|1","param_spellings":["475:39-475:40","475:46-475:47","475:53-475:58","475:64-475:70","475:85-475:90"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":45,"usr":5871484928345263255,"detailed_name":"void vex::brain::lcd::drawRectangle(int x, int y, int width, int height, const char *color)","short_name_offset":22,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{drawRectangle(1,1,50,20,\"#FF0000\");}\r\n@brief Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the color specified.\r\n@param x The x-coordinate at which the left edge of the rectangle will be drawn on the screen.\r\n@param y The y-coordinate at which the top edge of the rectangle will be drawn on the screen.\r\n@param width The width of the rectangle.\r\n@param height The height of the rectangle.\r\n@param color A hexadecimal value that represents color.","declarations":[{"spell":"488:20-488:33|6|2|1","param_spellings":["488:39-488:40","488:46-488:47","488:53-488:58","488:64-488:70","488:84-488:89"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":46,"usr":10996136663270880499,"detailed_name":"void vex::brain::lcd::drawRectangle(int x, int y, int width, int height, int hue)","short_name_offset":22,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{drawRectangle(1,1,50,20,50);}\r\n@brief Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the color specified.\r\n@param x The x-coordinate at which the left edge of the rectangle will be drawn on the screen.\r\n@param y The y-coordinate at which the top edge of the rectangle will be drawn on the screen.\r\n@param width The width of the rectangle.\r\n@param height The height of the rectangle. \r\n@param hue The color of the rectangle.","declarations":[{"spell":"501:20-501:33|6|2|1","param_spellings":["501:39-501:40","501:46-501:47","501:53-501:58","501:64-501:70","501:76-501:79"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":47,"usr":12633460635032850209,"detailed_name":"void vex::brain::lcd::drawCircle(T1 x, T2 y, T3 radius, C color)","short_name_offset":22,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"508:20-508:30|6|2|2","extent":"508:11-508:64|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[25,26,27,28],"uses":[],"callees":[]},{"id":48,"usr":8324169895604160696,"detailed_name":"void vex::brain::lcd::drawCircle(int x, int y, int radius)","short_name_offset":22,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{drawCircle(50,50,20);}\r\n@brief Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the current pen and fill color.\r\n@param x The central x location of the circle.\r\n@param y The central y location of the circle.\r\n@param radius Sets the radius of the circle to be drawn on the Screen.","declarations":[{"spell":"530:20-530:30|6|2|1","param_spellings":["530:36-530:37","530:43-530:44","530:50-530:56"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":49,"usr":16706090179406061529,"detailed_name":"void vex::brain::lcd::drawCircle(int x, int y, int radius, const vex::color &color)","short_name_offset":22,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{drawCircle(50,50,20,vex::color::red);}\r\n@brief Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the color specified.\r\n@param x The central x location of the circle.\r\n@param y The central y location of the circle.\r\n@param radius Sets the radius of the circle to be drawn on the Screen.\r\n@param color A color unit where colors can be defined as names.","declarations":[{"spell":"542:20-542:30|6|2|1","param_spellings":["542:36-542:37","542:43-542:44","542:50-542:56","542:71-542:76"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":50,"usr":12501904075357036179,"detailed_name":"void vex::brain::lcd::drawCircle(int x, int y, int radius, const char *color)","short_name_offset":22,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{drawCircle(50,50,20,\"#FF0000\");}\r\n@brief Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the color specified.\r\n@param x The central x location of the circle.\r\n@param y The central y location of the circle.\r\n@param radius Sets the radius of the circle to be drawn on the Screen.\r\n@param color A hexadecimal value that represents color.","declarations":[{"spell":"554:20-554:30|6|2|1","param_spellings":["554:36-554:37","554:43-554:44","554:50-554:56","554:70-554:75"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":51,"usr":11201895222250994780,"detailed_name":"void vex::brain::lcd::drawCircle(int x, int y, int radius, int hue)","short_name_offset":22,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{drawCircle(50,50,20,50);}\r\n@brief Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the color specified.\r\n@param x The central x location of the circle.\r\n@param y The central y location of the circle.\r\n@param radius Sets the radius of the circle to be drawn on the Screen.\r\n@param hue An integer that represents the hue of the color.","declarations":[{"spell":"566:20-566:30|6|2|1","param_spellings":["566:36-566:37","566:43-566:44","566:50-566:56","566:62-566:65"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":52,"usr":10317548155578287057,"detailed_name":"void vex::brain::lcd::pressed(void (*)() callback)","short_name_offset":22,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{pressed(pressedFunction);}\r\n@brief Sets the function to be called when the Screen is pressed.\r\n@param callback A reference to a function.","declarations":[{"spell":"577:20-577:27|6|2|1","param_spellings":["577:37-577:45"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":53,"usr":16644451221516102144,"detailed_name":"void vex::brain::lcd::pressed(void (*)(void *) callback, void *arg)","short_name_offset":22,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{setting|none}\r\n@block_sig{pressed(pressedFunction, arg);}\r\n@brief Sets the function to be called when the Screen is pressed.  A void pointer may be passed to the callback.\r\n@param callback A reference to a function.\r\n@param arg A void pointer that will be passed to the callback.","declarations":[{"spell":"586:20-586:27|6|2|1","param_spellings":["586:37-586:45","586:62-586:65"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":54,"usr":18092239431252501448,"detailed_name":"void vex::brain::lcd::released(void (*)() callback)","short_name_offset":22,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{released(releasedFunction);}\r\n@brief Sets the function to be called when the screen is released after being pressed.\r\n@param callback A reference to a function.","declarations":[{"spell":"595:20-595:28|6|2|1","param_spellings":["595:38-595:46"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":55,"usr":8468568862661589137,"detailed_name":"void vex::brain::lcd::released(void (*)(void *) callback, void *arg)","short_name_offset":22,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{setting|none}\r\n@block_sig{released(releasedFunction, arg);}\r\n@brief Sets the function to be called when the screen is released after being pressed.  A void pointer may be passed to the callback.\r\n@param callback A reference to a function.\r\n@param arg A void pointer that will be passed to the callback.","declarations":[{"spell":"604:20-604:28|6|2|1","param_spellings":["604:38-604:46","604:63-604:66"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":56,"usr":961255214835230109,"detailed_name":"int32_t vex::brain::lcd::xPosition()","short_name_offset":25,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{xPosition()}\r\n@brief Gets the last x location pressed on the screen.\r\n@return Returns an integer that represents the last x location pressed on the screen.","declarations":[{"spell":"613:20-613:29|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":57,"usr":11678592037208449280,"detailed_name":"int32_t vex::brain::lcd::yPosition()","short_name_offset":25,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{yPosition()}\r\n@brief Gets the last y location pressed on the screen.\r\n@return Returns an integer that represents the last y location pressed on the screen.","declarations":[{"spell":"622:20-622:29|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":58,"usr":12777724455854120783,"detailed_name":"bool vex::brain::lcd::pressing()","short_name_offset":22,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{pressing()}\r\n@brief Gets the pressed status of the Screen.\r\n@return Returns a Boolean based on the state of a press on the screen. If the screen is pressed, the Boolean will be true, if the button is released, the Boolean will be false.","declarations":[{"spell":"631:20-631:28|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":59,"usr":10773163098587327402,"detailed_name":"bool vex::brain::lcd::render()","short_name_offset":22,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{render();}\r\n@brief Switches to double buffering or renders back buffer to screen.\r\n@return Returns true if the back buffer was successfully copied to the screen.","declarations":[{"spell":"640:20-640:26|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":60,"usr":12668224093005173647,"detailed_name":"bool vex::brain::lcd::render(bool bVsyncWait, bool bRunScheduler)","short_name_offset":22,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{render(true, true);}\r\n@brief Switches to double buffering or renders back buffer to screen.\r\n@param bVsyncWait If true, wait for the Vsync signal to render.\r\n@param bRunScheduler (Optional) If true, run background tasks while waiting to render. By default, this parameter is true.\r\n@return Returns true if the back buffer was successfully copied to the screen.","declarations":[{"spell":"651:20-651:26|6|2|1","param_spellings":["651:33-651:43","651:50-651:63"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":61,"usr":12953990049788287965,"detailed_name":"void vex::brain::lcd::setClipRegion(int x, int y, int width, int height)","short_name_offset":22,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{setting}\r\n@block_sig{setClipRegion( 0, 0, 480, 240 );}\r\n@brief Sets the clip region for screen output.  Only effects the current thread.\r\n@param x The x-coordinate at the left edge of the clip region.\r\n@param y The y-coordinate at the top edge of the clip region.\r\n@param width The width of the clip region.\r\n@param height The height of the clip region.","declarations":[{"spell":"663:20-663:33|6|2|1","param_spellings":["663:39-663:40","663:46-663:47","663:53-663:58","663:64-663:70"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":62,"usr":11241591795319036625,"detailed_name":"bool vex::brain::lcd::drawImageFromBuffer(uint8_t *buffer, int x, int y, int bufferLen)","short_name_offset":22,"short_name_size":19,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{drawImageFromBuffer( buffer, 0, 0, length );}\r\n@brief Draws an image on the screen using the contents of the memory buffer.\r\n@param buffer A pointer to a buffer containing image data in either bmp or png format.\r\n@param x The x-coordinate at which the left edge of the image will be drawn.\r\n@param y The y-coordinate at which the top edge of the image will be drawn.\r\n@param bufferLen The size of the source image buffer in bytes.\r\n@return Returns true if the image was successfully drawn on the screen.\r\n@details\r\n This function draws an image on the screen using the contents of a buffer into which\r\n either BMP or PNG raw data has already been read.  The contents may have come from a\r\n file on the SD card or have been statically declared in the code.  The image should be\r\n no larger than the V5 Screen, that is, a maximum of 480 pixels wide by 272 pixels high.\r\n The top/left corner of the image is placed at the coordinates given by x and y, these can\r\n be negative if desired.","declarations":[{"spell":"683:20-683:39|6|2|1","param_spellings":["683:51-683:57","683:63-683:64","683:70-683:71","683:77-683:86"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":63,"usr":13996627018506060080,"detailed_name":"bool vex::brain::lcd::drawImageFromBuffer(uint32_t *buffer, int x, int y, int width, int height)","short_name_offset":22,"short_name_size":19,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{drawImageFromBuffer( buffer, 0, 0, 480, 240 );}\r\n@brief Draws an image on the screen using the contents of the memory buffer.\r\n@param buffer A pointer to a buffer containing raw 32 bit per pixel image data.\r\n@param x The x-coordinate at which the left edge of the image will be drawn.\r\n@param y The y-coordinate at which the top edge of the image will be drawn.\r\n@param width The width of the image.\r\n@param height The height of the image. \r\n@return Returns true if the image was successfully drawn on the screen.\r\n@details\r\n This funtion draws an image on the screen using the contents of a buffer into which\r\n raw RGB pixels have been placed.  Each pixel is represented by a 32 bit value, however,\r\n only the lower 24 bits are used as transparency is not yet supported.  The buffer contains\r\n pixels for the first row of the image immediately followed by pixels for the second row and so on.\r\n The image should be no larger than the V5 Screen, that is, a maximum of 480 pixels wide by 272 pixels high.\r\n The top/left corner of the image is placed at the coordinates given by x and y, these can\r\n be negative if desired.","declarations":[{"spell":"705:20-705:39|6|2|1","param_spellings":["705:51-705:57","705:63-705:64","705:70-705:71","705:77-705:82","705:88-705:94"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":64,"usr":12342955943203921304,"detailed_name":"bool vex::brain::lcd::drawImageFromFile(const char *name, int x, int y)","short_name_offset":22,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{drawImageFromFile( \"image.png\", 0, 0 );}\r\n@brief Draws an image on the screen using a file on the SD Card as the source.\r\n@param name The name of the image, it must have either a \".bmp\" or \".png\" extension.\r\n@param x The x-coordinate at which the left edge of the image will be drawn.\r\n@param y The y-coordinate at which the top edge of the image will be drawn.\r\n@return Returns true if the image was successfully drawn on the screen.\r\n@details\r\n This funtion draws an image on the screen using the contents of a file on an SD Card.\r\n The file should be no larger than 512K bytes and must have either a \".bmp\" or \".png\" extension.\r\n The image should be no larger than the V5 Screen, that is, a maximum of 480 pixels wide by 272 pixels high.\r\n The top/left corner of the image is placed at the coordinates given by x and y, these can\r\n be negative if desired.","declarations":[{"spell":"723:20-723:37|6|2|1","param_spellings":["723:51-723:55","723:61-723:62","723:68-723:69"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":65,"usr":8563305368057265801,"detailed_name":"void vex::brain::lcd::waitForRefresh()","short_name_offset":22,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"726:20-726:34|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":66,"usr":13958476231241126454,"detailed_name":"void vex::brain::lcd::renderDisable()","short_name_offset":22,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"727:20-727:33|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":67,"usr":8236992157830197032,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["731:28-731:99|6|2|288","732:28-732:99|6|2|288"],"callees":[]},{"id":68,"usr":1897545792884163912,"detailed_name":"void vex::brain::lcd::_setPenColor(uint32_t rgb)","short_name_offset":22,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"735:20-735:32|6|2|1","param_spellings":["735:43-735:46"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":69,"usr":17440558883153154695,"detailed_name":"void vex::brain::lcd::_setFillColor(uint32_t rgb)","short_name_offset":22,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"736:20-736:33|6|2|1","param_spellings":["736:44-736:47"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":70,"usr":6231359784134438465,"detailed_name":"void vex::brain::lcd::_clearScreen(uint32_t rgb)","short_name_offset":22,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"737:20-737:32|6|2|1","param_spellings":["737:43-737:46"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":71,"usr":4645265340977144569,"detailed_name":"void vex::brain::lcd::_clearLine(int number, uint32_t rgb)","short_name_offset":22,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"738:20-738:30|6|2|1","param_spellings":["738:36-738:42","738:53-738:56"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":72,"usr":10318896026388027475,"detailed_name":"void vex::brain::lcd::_drawRectangle(int x, int y, int width, int height, uint32_t rgb)","short_name_offset":22,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"739:20-739:34|6|2|1","param_spellings":["739:40-739:41","739:47-739:48","739:54-739:59","739:65-739:71","739:82-739:85"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":73,"usr":12185612206078062346,"detailed_name":"void vex::brain::lcd::_drawCircle(int x, int y, int radius, uint32_t rgb)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"740:20-740:31|6|2|1","param_spellings":["740:37-740:38","740:44-740:45","740:51-740:57","740:68-740:71"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":74,"usr":3388905382301327258,"detailed_name":"vex::brain::lcd::tImageBufferType vex::brain::lcd::_validateImageBuffer(uint8_t *buffer)","short_name_offset":51,"short_name_size":20,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"748:28-748:48|6|2|1","param_spellings":["748:59-748:65"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":75,"usr":11954056806006846546,"detailed_name":"uint32_t vex::brain::lcd::webColorToRgb(const char *color)","short_name_offset":26,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"750:21-750:34|6|2|1","param_spellings":["750:48-750:53"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":76,"usr":18292013676033662322,"detailed_name":"uint32_t vex::brain::lcd::hueToRgb(uint32_t color)","short_name_offset":26,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"751:21-751:29|6|2|1","param_spellings":["751:40-751:45"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":77,"usr":1018013008062889105,"detailed_name":"double vex::brain::timer(vex::timeUnits units)","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Brain.timer(seconds);}\r\n@cpp_sig{Brain.timer(vex::timeUnits::sec);}\r\n@brief Gets the value of the timer in the units specified.\r\n@param units The unit of time that will be returned.\r\n@return Returns a double that represents the value of the timer.","declarations":[{"spell":"764:19-764:24|2|2|1","param_spellings":["764:36-764:41"]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":78,"usr":11800346190584675905,"detailed_name":"void vex::brain::resetTimer()","short_name_offset":17,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{Brain.resetTimer();}\r\n@brief Resets the timer to zero.","declarations":[{"spell":"772:19-772:29|2|2|1","param_spellings":[]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":79,"usr":15773071123076562024,"detailed_name":"void vex::brain::setTimer(double value, vex::timeUnits units)","short_name_offset":17,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{Brain.setTimer(10, seconds);}\r\n@cpp_sig{Brain.setTimer(10, vex::timeUnits::sec);}\r\n@brief Sets the timer to a value and time unit.\r\n@param value The value that the timer is set to.\r\n@param units The unit of time that will be returned.","declarations":[{"spell":"783:19-783:27|2|2|1","param_spellings":["783:36-783:41","783:53-783:58"]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":80,"usr":15532113077461569567,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["806:35-806:52|2|2|288"],"callees":[]},{"id":81,"usr":7022443611110273739,"detailed_name":"void vex::brain::battery::battery()","short_name_offset":17,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"","declarations":[],"spell":"814:11-814:18|34|2|2","extent":"814:11-814:23|34|2|0","declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":82,"usr":12047871656197199618,"detailed_name":"void vex::brain::battery::~battery() noexcept","short_name_offset":26,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"815:11-815:19|34|2|2","extent":"815:11-815:24|34|2|0","declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":83,"usr":11966694617766877148,"detailed_name":"uint32_t vex::brain::battery::capacity(vex::percentUnits units)","short_name_offset":30,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{capacity()}\r\n@brief Gets the battery capacity.\r\n@return Returns an integer that represents the batteries capacity in the units specified by the parameter.\r\n@param units (Optional) The type of unit that will be returned. By default, this parameter is a percentage.","declarations":[{"spell":"825:21-825:29|34|2|1","param_spellings":["825:44-825:49"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":84,"usr":93586634191568338,"detailed_name":"double vex::brain::battery::temperature(vex::percentUnits units)","short_name_offset":28,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{temperature()}\r\n@brief Gets the battery temperature.\r\n@return Returns a double that represents the batteries temperature in the units specified by the parameter.\r\n@param units (Optional) The type of unit that will be returned. By default, this parameter is a percentage.","declarations":[{"spell":"835:21-835:32|34|2|1","param_spellings":["835:47-835:52"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":85,"usr":5945853575144438504,"detailed_name":"double vex::brain::battery::temperature(vex::temperatureUnits units)","short_name_offset":28,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{temperature(vex::temperatureUnits::celsius)}\r\n@brief Gets the battery temperature.\r\n@return Returns a double that represents the batteries temperature in the units specified by the parameter.\r\n@param units The unit of temperature that will be returned.","declarations":[{"spell":"845:21-845:32|34|2|1","param_spellings":["845:51-845:56"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":86,"usr":14107561593425803606,"detailed_name":"double vex::brain::battery::voltage(vex::voltageUnits units)","short_name_offset":28,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{voltage( vex::voltageUnits::volt )}\r\n@brief Gets the battery voltage.\r\n@return Returns a double that represents the batteries voltage in the units specified by the parameter.\r\n@param units The unit of voltage to be returned.","declarations":[{"spell":"855:21-855:28|34|2|1","param_spellings":["855:43-855:48"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":87,"usr":5616390633917334032,"detailed_name":"double vex::brain::battery::current(vex::currentUnits units)","short_name_offset":28,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{current( vex::currentUnits::amp )}\r\n@brief Gets the battery current.\r\n@return Returns a double that represents the batteries current in the units specified by the parameter.\r\n@param units The type of current to be returned.","declarations":[{"spell":"865:21-865:28|34|2|1","param_spellings":["865:43-865:48"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":88,"usr":11911412840898865184,"detailed_name":"void vex::brain::sdcard::sdcard()","short_name_offset":17,"short_name_size":6,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"882:11-882:17|39|2|1","param_spellings":[]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":89,"usr":11905049460690332768,"detailed_name":"void vex::brain::sdcard::~sdcard()","short_name_offset":25,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"883:11-883:18|39|2|1","param_spellings":[]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":90,"usr":13573791882717033834,"detailed_name":"bool vex::brain::sdcard::isInserted()","short_name_offset":25,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{isInserted()}\r\n@brief Gets the state of the SD card\r\n@return Returns true if the SD card is inserted. Returns false if there is not an SD card inserted.","declarations":[{"spell":"892:19-892:29|39|2|1","param_spellings":[]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":91,"usr":14495664703144377087,"detailed_name":"int32_t vex::brain::sdcard::loadfile(const char *name, uint8_t *buffer, int32_t len)","short_name_offset":28,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{loadFile(\"filename.txt\", buffer, 100);}\r\n@return Returns the number of bytes read from the file.\r\n@brief Loads a file from the SD card.\r\n@param name The name of the file.\r\n@param buffer Pointer to a buffer for file data.\r\n@param len The length of the buffer in bytes. Usually set to the max length of the buffer.","declarations":[{"spell":"904:19-904:27|39|2|1","param_spellings":["904:40-904:44","904:55-904:61","904:71-904:74"]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":92,"usr":10071815185462436660,"detailed_name":"int32_t vex::brain::sdcard::savefile(const char *name, uint8_t *buffer, int32_t len)","short_name_offset":28,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{saveFile(\"filename.txt\", buffer, 100);}\r\n@brief Saves a file to the SD card.\r\n@return Returns the number of bytes saved to the file.\r\n@param name The name of the file.\r\n@param buffer Pointer to a buffer with file data.\r\n@param len The length of the buffer in bytes. Usually set to the max length of the buffer.","declarations":[{"spell":"916:19-916:27|39|2|1","param_spellings":["916:40-916:44","916:55-916:61","916:71-916:74"]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":93,"usr":17990815882401974658,"detailed_name":"int32_t vex::brain::sdcard::appendfile(const char *name, uint8_t *buffer, int32_t len)","short_name_offset":28,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{appendFile(\"filename.txt\", buffer, 100);}\r\n@brief Appends data to an existing file.\r\n@return Returns the number of bytes saved to the file.\r\n@param name The name of the file.\r\n@param buffer Pointer to a buffer with file data.\r\n@param len The length of the buffer in bytes. Usually set to the max length of the buffer.","declarations":[{"spell":"928:19-928:29|39|2|1","param_spellings":["928:42-928:46","928:57-928:63","928:73-928:76"]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":94,"usr":8155435829122684834,"detailed_name":"int32_t vex::brain::sdcard::size(const char *name)","short_name_offset":28,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief get the size in bytes of the named file\r\n@return size of file in bytes\r\n@param name The name of the file.","declarations":[{"spell":"935:19-935:23|39|2|1","param_spellings":["935:36-935:40"]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":95,"usr":14900353110226727354,"detailed_name":"bool vex::brain::sdcard::exists(const char *name)","short_name_offset":25,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief check if the named file exists\r\n@return true if the file exists\r\n@param name The name of the file.","declarations":[{"spell":"942:19-942:25|39|2|1","param_spellings":["942:38-942:42"]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":366004523727693117,"detailed_name":"vex::brain::tEventType::EVENT_LCD_PRESSED","short_name_offset":24,"short_name_size":17,"hover":"vex::brain::tEventType::EVENT_LCD_PRESSED = 0","comments":"","declarations":[],"spell":"51:9-51:26|5|2|2","extent":"51:9-51:33|5|2|0","type":5,"uses":["731:78-731:95|6|2|4"],"kind":22,"storage":0},{"id":1,"usr":8093075942589946508,"detailed_name":"vex::brain::tEventType::EVENT_LCD_RELEASED","short_name_offset":24,"short_name_size":18,"hover":"vex::brain::tEventType::EVENT_LCD_RELEASED = 1","comments":"","declarations":[],"spell":"52:9-52:27|5|2|2","extent":"52:9-52:33|5|2|0","type":5,"uses":["732:78-732:96|6|2|4"],"kind":22,"storage":0},{"id":2,"usr":2653727990955281009,"detailed_name":"int32_t vex::brain::lcd::_row","short_name_offset":25,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"60:21-60:25|6|2|2","extent":"60:11-60:25|6|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":3,"usr":4673387314768298547,"detailed_name":"int32_t vex::brain::lcd::_maxrows","short_name_offset":25,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"61:21-61:29|6|2|2","extent":"61:11-61:29|6|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":4,"usr":2340373350415617329,"detailed_name":"int32_t vex::brain::lcd::_rowheight","short_name_offset":25,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"62:21-62:31|6|2|2","extent":"62:11-62:31|6|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":5,"usr":3211909113829985912,"detailed_name":"int32_t vex::brain::lcd::_col","short_name_offset":25,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"64:21-64:25|6|2|2","extent":"64:11-64:25|6|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":6,"usr":1344894488723695774,"detailed_name":"int32_t vex::brain::lcd::_maxcols","short_name_offset":25,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"65:21-65:29|6|2|2","extent":"65:11-65:29|6|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":7,"usr":11959106654411584825,"detailed_name":"int32_t vex::brain::lcd::_colwidth","short_name_offset":25,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"66:21-66:30|6|2|2","extent":"66:11-66:30|6|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":8,"usr":11083278834567842640,"detailed_name":"int32_t vex::brain::lcd::_penWidth","short_name_offset":25,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"68:21-68:30|6|2|2","extent":"68:11-68:30|6|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":9,"usr":9308160253401085851,"detailed_name":"uint32_t vex::brain::lcd::_textbase","short_name_offset":26,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"70:21-70:30|6|2|2","extent":"70:11-70:30|6|2|0","type":7,"uses":[],"kind":8,"storage":0},{"id":10,"usr":11553326362578354220,"detailed_name":"char [256] vex::brain::lcd::_textStr","short_name_offset":28,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"72:21-72:29|6|2|2","extent":"72:11-72:34|6|2|0","type":8,"uses":[],"kind":8,"storage":0},{"id":11,"usr":17497819512815156906,"detailed_name":"bool vex::brain::lcd::_transparent","short_name_offset":22,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"77:21-77:33|6|2|2","extent":"77:11-77:33|6|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":12,"usr":17872991897187213160,"detailed_name":"int vex::brain::lcd::_origin_x","short_name_offset":21,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"79:21-79:30|6|2|2","extent":"79:11-79:30|6|2|0","type":10,"uses":[],"kind":8,"storage":0},{"id":13,"usr":2041797329328551277,"detailed_name":"int vex::brain::lcd::_origin_y","short_name_offset":21,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"80:21-80:30|6|2|2","extent":"80:11-80:30|6|2|0","type":10,"uses":[],"kind":8,"storage":0},{"id":14,"usr":6998802061646783785,"detailed_name":"T color","short_name_offset":2,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"158:35-158:40|13|3|2","extent":"158:33-158:40|13|3|0","uses":[],"kind":253,"storage":1},{"id":15,"usr":15287743078789885557,"detailed_name":"T color","short_name_offset":2,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"193:36-193:41|17|3|2","extent":"193:34-193:41|17|3|0","uses":[],"kind":253,"storage":1},{"id":16,"usr":14267238457198648676,"detailed_name":"T value","short_name_offset":2,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"254:29-254:34|23|3|2","extent":"254:27-254:34|23|3|0","uses":[],"kind":253,"storage":1},{"id":17,"usr":241262648271172487,"detailed_name":"T color","short_name_offset":2,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"306:35-306:40|28|3|2","extent":"306:33-306:40|28|3|0","uses":[],"kind":253,"storage":1},{"id":18,"usr":4310029211373054531,"detailed_name":"T1 number","short_name_offset":3,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"346:34-346:40|33|3|2","extent":"346:31-346:40|33|3|0","uses":[],"kind":253,"storage":1},{"id":19,"usr":9029004560916361161,"detailed_name":"C color","short_name_offset":2,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"346:44-346:49|33|3|2","extent":"346:42-346:49|33|3|0","uses":[],"kind":253,"storage":1},{"id":20,"usr":6385642216655097916,"detailed_name":"T1 x","short_name_offset":3,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"439:38-439:39|42|3|2","extent":"439:35-439:39|42|3|0","uses":[],"kind":253,"storage":1},{"id":21,"usr":11773557465558165719,"detailed_name":"T2 y","short_name_offset":3,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"439:44-439:45|42|3|2","extent":"439:41-439:45|42|3|0","uses":[],"kind":253,"storage":1},{"id":22,"usr":5593674160939495358,"detailed_name":"T3 width","short_name_offset":3,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"439:50-439:55|42|3|2","extent":"439:47-439:55|42|3|0","uses":[],"kind":253,"storage":1},{"id":23,"usr":18073502311152911324,"detailed_name":"T4 height","short_name_offset":3,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"439:60-439:66|42|3|2","extent":"439:57-439:66|42|3|0","uses":[],"kind":253,"storage":1},{"id":24,"usr":15205288701082679538,"detailed_name":"C color","short_name_offset":2,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"439:70-439:75|42|3|2","extent":"439:68-439:75|42|3|0","uses":[],"kind":253,"storage":1},{"id":25,"usr":9570994645607381708,"detailed_name":"T1 x","short_name_offset":3,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"508:35-508:36|47|3|2","extent":"508:32-508:36|47|3|0","uses":[],"kind":253,"storage":1},{"id":26,"usr":8974257389996350458,"detailed_name":"T2 y","short_name_offset":3,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"508:41-508:42|47|3|2","extent":"508:38-508:42|47|3|0","uses":[],"kind":253,"storage":1},{"id":27,"usr":12658078780341859907,"detailed_name":"T3 radius","short_name_offset":3,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"508:47-508:53|47|3|2","extent":"508:44-508:53|47|3|0","uses":[],"kind":253,"storage":1},{"id":28,"usr":11270072400059260661,"detailed_name":"C color","short_name_offset":2,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"508:57-508:62|47|3|2","extent":"508:55-508:62|47|3|0","uses":[],"kind":253,"storage":1},{"id":29,"usr":7359783162928111056,"detailed_name":"vex::mevent vex::brain::lcd::PRESSED","short_name_offset":29,"short_name_size":7,"hover":"vex::mevent vex::brain::lcd::PRESSED  = {(uint32_t)brain::_getIndex(), (int)tEventType::EVENT_LCD_PRESSED   }","comments":"","declarations":[],"spell":"731:19-731:26|6|2|2","extent":"731:11-731:99|6|2|0","type":29,"uses":[],"kind":8,"storage":0},{"id":30,"usr":2949653856116936257,"detailed_name":"vex::mevent vex::brain::lcd::RELEASED","short_name_offset":29,"short_name_size":8,"hover":"vex::mevent vex::brain::lcd::RELEASED = {(uint32_t)brain::_getIndex(), (int)tEventType::EVENT_LCD_RELEASED  }","comments":"","declarations":[],"spell":"732:19-732:27|6|2|2","extent":"732:11-732:99|6|2|0","type":29,"uses":[],"kind":8,"storage":0},{"id":31,"usr":5854619457224226206,"detailed_name":"vex::brain::lcd::tImageBufferType::kImageBufferTypeUnknown","short_name_offset":35,"short_name_size":23,"hover":"vex::brain::lcd::tImageBufferType::kImageBufferTypeUnknown = 0","comments":"","declarations":[],"spell":"743:13-743:36|30|2|2","extent":"743:13-743:40|30|2|0","type":30,"uses":[],"kind":22,"storage":0},{"id":32,"usr":5655822446425827785,"detailed_name":"vex::brain::lcd::tImageBufferType::kImageBufferTypeBmp","short_name_offset":35,"short_name_size":19,"hover":"vex::brain::lcd::tImageBufferType::kImageBufferTypeBmp = 1","comments":"","declarations":[],"spell":"744:13-744:32|30|2|2","extent":"744:13-744:32|30|2|0","type":30,"uses":[],"kind":22,"storage":0},{"id":33,"usr":7566767614243426240,"detailed_name":"vex::brain::lcd::tImageBufferType::kImageBufferTypePng","short_name_offset":35,"short_name_size":19,"hover":"vex::brain::lcd::tImageBufferType::kImageBufferTypePng = 2","comments":"","declarations":[],"spell":"745:13-745:32|30|2|2","extent":"745:13-745:32|30|2|0","type":30,"uses":[],"kind":22,"storage":0},{"id":34,"usr":5866879932156112139,"detailed_name":"vex::timer vex::brain::Timer","short_name_offset":23,"short_name_size":5,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{instance}\r\n@block_sig{Brain.Timer}\r\n@brief Use the Timer class to obtain the system time.","declarations":[],"spell":"791:19-791:24|2|2|2","extent":"791:7-791:24|2|2|0","type":32,"uses":[],"kind":8,"storage":0},{"id":35,"usr":14675319530485067860,"detailed_name":"vex::brain::lcd vex::brain::Screen","short_name_offset":28,"short_name_size":6,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{instance}\r\n@block_sig{Brain.Screen}\r\n@brief Use the Screen class to write or draw to the screen.","declarations":[],"spell":"799:19-799:25|2|2|2","extent":"799:7-799:25|2|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":36,"usr":11470284345415609533,"detailed_name":"vex::triport vex::brain::ThreeWirePort","short_name_offset":25,"short_name_size":13,"hover":"vex::triport vex::brain::ThreeWirePort = triport( PORT22 )","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{instance|none}\r\n@brief The Brain's instance of Three Wire Ports A through H.","declarations":[],"spell":"806:19-806:32|2|2|2","extent":"806:7-806:52|2|2|0","type":33,"uses":[],"kind":8,"storage":0},{"id":37,"usr":13321194405392501537,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["806:44-806:50|-1|1|4"],"kind":0,"storage":0},{"id":38,"usr":15447115824431573710,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["825:66-825:69|34|2|4","835:69-835:72|34|2|4"],"kind":0,"storage":0},{"id":39,"usr":6517959520313629241,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["855:65-855:69|34|2|4"],"kind":0,"storage":0},{"id":40,"usr":15838809536338316623,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["865:65-865:68|34|2|4"],"kind":0,"storage":0},{"id":41,"usr":3702784918336847770,"detailed_name":"vex::brain::battery vex::brain::Battery","short_name_offset":32,"short_name_size":7,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{instance}\r\n@block_sig{Brain.Battery}\r\n@brief This is the Brain's instance of the battery.","declarations":[],"spell":"874:19-874:26|2|2|2","extent":"874:7-874:26|2|2|0","type":34,"uses":[],"kind":8,"storage":0},{"id":42,"usr":13912828033423475833,"detailed_name":"vex::brain::sdcard vex::brain::SDcard","short_name_offset":31,"short_name_size":6,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{instance}\r\n@block_sig{Brain.SDcard}\r\n@brief This is the instance of the SD card class.","declarations":[],"spell":"950:19-950:25|2|2|2","extent":"950:7-950:25|2|2|0","type":39,"uses":[],"kind":8,"storage":0},{"id":43,"usr":7172097544100518891,"detailed_name":"VEX_BRAIN_CLASS_H","short_name_offset":0,"short_name_size":17,"hover":"#define VEX_BRAIN_CLASS_H","comments":"","declarations":[],"spell":"15:11-15:28|-1|1|2","extent":"15:11-15:28|-1|1|0","uses":[],"kind":255,"storage":0},{"id":44,"usr":15744410311726664721,"detailed_name":"FONT_MONO_CELL_WIDTH","short_name_offset":0,"short_name_size":20,"hover":"#define FONT_MONO_CELL_WIDTH   10","comments":"","declarations":[],"spell":"82:21-82:41|-1|1|2","extent":"82:21-82:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":45,"usr":1138021622668667183,"detailed_name":"FONT_MONO_CELL_HEIGHT","short_name_offset":0,"short_name_size":21,"hover":"#define FONT_MONO_CELL_HEIGHT  20","comments":"","declarations":[],"spell":"83:21-83:42|-1|1|2","extent":"83:21-83:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":46,"usr":17151806566216764053,"detailed_name":"FONT_MONO_CELL_BASE","short_name_offset":0,"short_name_size":19,"hover":"#define FONT_MONO_CELL_BASE     4","comments":"","declarations":[],"spell":"84:21-84:40|-1|1|2","extent":"84:21-84:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":47,"usr":18130526581027967388,"detailed_name":"FONT_PROP_CELL_WIDTH","short_name_offset":0,"short_name_size":20,"hover":"#define FONT_PROP_CELL_WIDTH   10","comments":"","declarations":[],"spell":"89:21-89:41|-1|1|2","extent":"89:21-89:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":48,"usr":9359427779282542184,"detailed_name":"FONT_PROP_CELL_HEIGHT","short_name_offset":0,"short_name_size":21,"hover":"#define FONT_PROP_CELL_HEIGHT  20","comments":"","declarations":[],"spell":"90:21-90:42|-1|1|2","extent":"90:21-90:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":49,"usr":15026265934916956063,"detailed_name":"FONT_PROP_CELL_BASE","short_name_offset":0,"short_name_size":19,"hover":"#define FONT_PROP_CELL_BASE     4","comments":"","declarations":[],"spell":"91:21-91:40|-1|1|2","extent":"91:21-91:46|-1|1|0","uses":[],"kind":255,"storage":0}]}