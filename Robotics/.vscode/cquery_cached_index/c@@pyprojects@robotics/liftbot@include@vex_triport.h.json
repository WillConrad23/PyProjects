16
{"last_modification_time":1581739682,"language":2,"import_file":"c:/pyprojects/robotics/liftbot/src/main.cpp","args_hash":9702252571785421998,"includes":[],"dependencies":["c:/pyprojects/robotics/liftbot/src/main.cpp","c:/pyprojects/robotics/liftbot/include/vex.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/math.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_math.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/sal.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_stdio_config.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_malloc.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_search.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stddef.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/limits.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memory.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memcpy_s.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/errno.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime_string.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h","c:/pyprojects/robotics/liftbot/include/v5.h","c:/pyprojects/robotics/liftbot/include/v5_api.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/stdint.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/stdarg.h","c:/pyprojects/robotics/liftbot/include/v5_apitypes.h","c:/pyprojects/robotics/liftbot/include/v5_apiuser.h","c:/pyprojects/robotics/liftbot/include/v5_vcs.h","c:/pyprojects/robotics/liftbot/include/v5_cpp.h","c:/pyprojects/robotics/liftbot/include/vex_thread.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/chrono","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/yvals_core.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xkeycheck.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/limits","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cfloat","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/float.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/climits","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cwchar","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cstdio","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/wchar.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wconio.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wctype.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wdirect.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wio.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wprocess.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wtime.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/sys/stat.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/intrin0.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/intrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/setjmp.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/immintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/wmmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/nmmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/smmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/tmmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/pmmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/emmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xmmintrin.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/malloc.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xstddef","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cstddef","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xtr1common","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cstdlib","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/initializer_list","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/ratio","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/type_traits","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/time.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/utility","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xtimec.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/yvals.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/crtdbg.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime_new_debug.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime_new.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/crtdefs.h","c:/pyprojects/robotics/liftbot/include/vex_device.h","c:/pyprojects/robotics/liftbot/include/vex_controller.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/functional","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/exception","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime_exception.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/eh.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_terminate.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/tuple","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/new","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xutility","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cstring","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/typeinfo","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vcruntime_typeinfo.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xmemory","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/cstdint","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/xatomic.h","c:/pyprojects/robotics/liftbot/include/vex_brain.h","c:/pyprojects/robotics/liftbot/include/vex_drivetrain.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/vadefs.h","c:/pyprojects/robotics/liftbot/include/vex_task.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/sys/types.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/mmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/zmmintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/ammintrin.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/isa_availability.h","c:/pyprojects/robotics/liftbot/include/vex_event.h","c:/pyprojects/robotics/liftbot/include/vex_mevent.h","c:/pyprojects/robotics/liftbot/include/vex_units.h","c:/pyprojects/robotics/liftbot/include/vex_color.h","c:/pyprojects/robotics/liftbot/include/vex_motor.h","c:/pyprojects/robotics/liftbot/include/vex_vision.h","c:/pyprojects/robotics/liftbot/include/vex_imu.h","c:/pyprojects/robotics/liftbot/include/vex_rotation.h","c:/pyprojects/robotics/liftbot/include/vex_optical.h","c:/pyprojects/robotics/liftbot/include/vex_distance.h","c:/pyprojects/robotics/liftbot/include/vex_electromag.h","c:/pyprojects/robotics/liftbot/include/vex_timer.h","c:/pyprojects/robotics/liftbot/include/vex_global.h","c:/pyprojects/robotics/liftbot/include/vex_competition.h","c:/pyprojects/robotics/liftbot/include/vex_motorgroup.h","c:/pyprojects/robotics/liftbot/include/vex_smartdrive.h","c:/pyprojects/robotics/liftbot/include/vex_vexlink.h","c:/pyprojects/robotics/liftbot/include/robot-config.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/concurrencysal.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/stdbool.h","c:/pyprojects/robotics/liftbot/include/v5_color.h","c:/pyprojects/robotics/liftbot/include/v5_apiprivate.h","c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_share.h","c:/program files (x86)/microsoft visual studio/2019/community/vc/tools/msvc/14.28.29333/include/use_ansi.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":8368589376327801919,"detailed_name":"vex","short_name_offset":0,"short_name_size":3,"kind":3,"hover":"","comments":"","declarations":[],"spell":"25:11-25:14|-1|1|2","extent":"25:1-1435:2|-1|1|0","bases":[1],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["25:11-25:14|-1|1|4"]},{"id":1,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[0],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":2,"usr":3769340180355582632,"detailed_name":"vex::triport","short_name_offset":5,"short_name_size":7,"kind":5,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@brief Use this class to get and set information about devices on Three Wire Ports A through H.","declarations":["57:7-57:14|-1|1|4","58:8-58:15|-1|1|4","61:7-61:14|-1|1|4"],"spell":"30:9-30:16|0|2|2","extent":"30:3-285:4|0|2|0","bases":[3],"derived":[],"types":[],"funcs":[0,1,2,3,4,5,6,7,9,10],"vars":[3,17,18,19,20,21,22,23,24,25],"instances":[9],"uses":["57:7-57:14|2|2|4","61:7-61:14|2|2|4","81:11-81:18|-1|1|4","87:35-87:42|-1|1|4","88:59-88:66|-1|1|4","292:9-292:16|-1|1|4","304:22-304:29|-1|1|4","323:16-323:23|-1|1|4","382:17-382:24|-1|1|4","442:21-442:28|-1|1|4","494:22-494:29|-1|1|4","541:14-541:21|-1|1|4","575:21-575:28|-1|1|4","610:14-610:21|-1|1|4","680:15-680:22|-1|1|4","732:16-732:23|-1|1|4","790:15-790:22|-1|1|4","931:24-931:31|-1|1|4","990:20-990:27|-1|1|4","1040:18-1040:25|-1|1|4","1123:16-1123:23|-1|1|4","1186:18-1186:25|-1|1|4","1214:16-1214:23|-1|1|4","1283:18-1283:25|-1|1|4","1293:18-1293:25|-1|1|4","1368:23-1368:30|-1|1|4","1378:23-1378:30|-1|1|4"]},{"id":3,"usr":12573014169591785977,"detailed_name":"vex::device","short_name_offset":5,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":["30:26-30:32|-1|1|4"],"bases":[],"derived":[2],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["30:26-30:32|-1|1|4"]},{"id":4,"usr":17409967827770653370,"detailed_name":"vex::triport::tEventType","short_name_offset":14,"short_name_size":10,"kind":10,"hover":"","comments":"","declarations":[],"spell":"32:18-32:28|2|2|2","extent":"32:7-36:8|2|2|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["214:76-214:86|-1|1|4","215:76-215:86|-1|1|4","216:76-216:86|-1|1|4"]},{"id":5,"usr":16199156163178427820,"detailed_name":"uint32_t","short_name_offset":0,"short_name_size":8,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[3,50,62,63],"uses":["39:7-39:15|-1|1|4","42:25-42:33|-1|1|4","214:34-214:42|-1|1|4","214:67-214:75|-1|1|4","215:34-215:42|-1|1|4","215:67-215:75|-1|1|4","216:34-216:42|-1|1|4","216:67-216:75|-1|1|4","779:9-779:17|-1|1|4","1167:9-1167:17|-1|1|4","1168:9-1168:17|-1|1|4"]},{"id":6,"usr":10774868737281855593,"detailed_name":"vex::triportType","short_name_offset":5,"short_name_size":11,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[10],"uses":["42:38-42:49|-1|1|4","53:48-53:59|-1|1|4","54:7-54:18|-1|1|4","88:41-88:52|-1|1|4","97:28-97:39|-1|1|4","105:11-105:22|-1|1|4","157:34-157:45|-1|1|4","304:43-304:54|-1|1|4"]},{"id":7,"usr":1847747007866647169,"detailed_name":"first","short_name_offset":0,"short_name_size":5,"kind":26,"hover":"","comments":"","declarations":[],"spell":"44:26-44:31|2|3|2","extent":"44:17-44:31|2|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["45:22-45:27|-1|1|4"]},{"id":8,"usr":7445405579134756832,"detailed_name":"Args","short_name_offset":0,"short_name_size":4,"kind":26,"hover":"","comments":"","declarations":[],"spell":"44:45-44:49|2|3|2","extent":"44:33-44:49|2|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["45:34-45:38|-1|1|4"]},{"id":9,"usr":11353837028888530222,"detailed_name":"int32_t","short_name_offset":0,"short_name_size":7,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[6,8,11,48,49,52,64,69,75],"uses":["50:7-50:14|-1|1|4","57:16-57:23|-1|1|4","61:16-61:23|-1|1|4","80:11-80:18|-1|1|4","82:11-82:18|-1|1|4","83:11-83:18|-1|1|4","83:37-83:44|-1|1|4","87:23-87:30|-1|1|4","88:23-88:30|-1|1|4","113:28-113:35|-1|1|4","121:11-121:18|-1|1|4","160:33-160:40|-1|1|4","294:9-294:16|-1|1|4","295:9-295:16|-1|1|4","295:35-295:42|-1|1|4","333:9-333:16|-1|1|4","343:9-343:16|-1|1|4","392:9-392:16|-1|1|4","402:9-402:16|-1|1|4","452:9-452:16|-1|1|4","504:9-504:16|-1|1|4","524:31-524:38|-1|1|4","621:9-621:16|-1|1|4","632:9-632:16|-1|1|4","636:9-636:16|-1|1|4","690:9-690:16|-1|1|4","692:9-692:16|-1|1|4","703:9-703:16|-1|1|4","743:9-743:16|-1|1|4","745:9-745:16|-1|1|4","756:9-756:16|-1|1|4","777:9-777:16|-1|1|4","778:9-778:16|-1|1|4","801:9-801:16|-1|1|4","823:9-823:16|-1|1|4","834:37-834:44|-1|1|4","836:30-836:37|-1|1|4","941:9-941:16|-1|1|4","952:9-952:16|-1|1|4","1001:9-1001:16|-1|1|4","1011:9-1011:16|-1|1|4","1050:9-1050:16|-1|1|4","1133:9-1133:16|-1|1|4","1198:21-1198:28|-1|1|4","1226:27-1226:34|-1|1|4","1247:29-1247:36|-1|1|4","1271:9-1271:16|-1|1|4","1356:9-1356:16|-1|1|4"]},{"id":10,"usr":14291758771775019914,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["53:7-53:30|-1|1|4","54:48-54:71|-1|1|4"]},{"id":11,"usr":6133554353502437909,"detailed_name":"Args","short_name_offset":0,"short_name_size":4,"kind":26,"hover":"","comments":"","declarations":[],"spell":"60:29-60:33|9|3|2","extent":"60:17-60:33|9|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["61:31-61:35|-1|1|4"]},{"id":12,"usr":665903730239396376,"detailed_name":"vex::triport::port","short_name_offset":14,"short_name_size":4,"kind":5,"hover":"","comments":"\r\n@prog_lang{none}\r\n@brief TBD","declarations":["86:11-86:15|-1|1|4","87:11-87:15|-1|1|4","88:11-88:15|-1|1|4","89:12-89:16|-1|1|4"],"spell":"76:13-76:17|2|2|2","extent":"76:7-220:8|2|2|0","bases":[],"derived":[],"types":[],"funcs":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"vars":[8,9,12,13,14,15,16],"instances":[17,18,19,20,21,22,23,24,25,26],"uses":["86:11-86:15|12|2|4","87:11-87:15|12|2|4","88:11-88:15|12|2|4","224:7-224:11|-1|1|4","242:7-242:11|-1|1|4","248:7-248:11|-1|1|4","254:7-254:11|-1|1|4","260:7-260:11|-1|1|4","266:7-266:11|-1|1|4","272:7-272:11|-1|1|4","278:7-278:11|-1|1|4","284:7-284:11|-1|1|4","292:18-292:22|-1|1|4","304:31-304:35|-1|1|4","323:25-323:29|-1|1|4","382:26-382:30|-1|1|4","442:30-442:34|-1|1|4","494:31-494:35|-1|1|4","541:23-541:27|-1|1|4","575:30-575:34|-1|1|4","610:23-610:27|-1|1|4","680:24-680:28|-1|1|4","732:25-732:29|-1|1|4","790:24-790:28|-1|1|4","931:33-931:37|-1|1|4","990:29-990:33|-1|1|4","1040:27-1040:31|-1|1|4","1123:25-1123:29|-1|1|4","1186:27-1186:31|-1|1|4","1214:25-1214:29|-1|1|4","1283:27-1283:31|-1|1|4","1293:27-1293:31|-1|1|4","1368:32-1368:36|-1|1|4","1378:32-1378:36|-1|1|4"]},{"id":13,"usr":9501318860097581378,"detailed_name":"vex::__tridevice","short_name_offset":5,"short_name_size":11,"kind":5,"hover":"","comments":"\r\n@prog_lang{none}\r\n@brief Base class that allows access to Three Wire Port functions and members.","declarations":["77:22-77:33|-1|1|4","304:9-304:20|-1|1|4","306:10-306:21|-1|1|4","313:25-313:36|-1|1|4","373:26-373:37|-1|1|4","432:30-432:41|-1|1|4","484:31-484:42|-1|1|4","600:23-600:34|-1|1|4","670:24-670:35|-1|1|4","722:25-722:36|-1|1|4","775:24-775:35|-1|1|4","921:33-921:44|-1|1|4","980:29-980:40|-1|1|4","1030:27-1030:38|-1|1|4","1113:25-1113:36|-1|1|4","1176:27-1176:38|-1|1|4","1204:25-1204:36|-1|1|4","1268:27-1268:38|-1|1|4","1353:32-1353:43|-1|1|4"],"spell":"290:9-290:20|0|2|2","extent":"290:3-308:4|0|2|0","bases":[],"derived":[19,20,21,22,25,27,28,29,31,33,34,35,36,37,39,41],"types":[],"funcs":[36,37,38,39],"vars":[26,27,28,29,30,31],"instances":[],"uses":["304:9-304:20|13|2|4","313:25-313:36|-1|1|4","373:26-373:37|-1|1|4","432:30-432:41|-1|1|4","484:31-484:42|-1|1|4","600:23-600:34|-1|1|4","670:24-670:35|-1|1|4","722:25-722:36|-1|1|4","775:24-775:35|-1|1|4","921:33-921:44|-1|1|4","980:29-980:40|-1|1|4","1030:27-1030:38|-1|1|4","1113:25-1113:36|-1|1|4","1176:27-1176:38|-1|1|4","1204:25-1204:36|-1|1|4","1268:27-1268:38|-1|1|4","1353:32-1353:43|-1|1|4"]},{"id":14,"usr":202319149122335501,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["82:37-82:48|-1|1|4","294:35-294:46|-1|1|4","621:26-621:37|-1|1|4","633:25-633:36|-1|1|4","690:26-690:37|-1|1|4","704:25-704:36|-1|1|4","743:26-743:37|-1|1|4","757:25-757:36|-1|1|4","801:26-801:37|-1|1|4","824:25-824:36|-1|1|4","941:26-941:37|-1|1|4","953:25-953:36|-1|1|4","1001:26-1001:37|-1|1|4","1012:25-1012:36|-1|1|4"]},{"id":15,"usr":2518119703099383490,"detailed_name":"vex::rotationUnits","short_name_offset":5,"short_name_size":13,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[41,67],"uses":["185:44-185:57|-1|1|4","194:29-194:42|-1|1|4","649:26-649:39|-1|1|4","651:26-651:39|-1|1|4","812:26-812:39|-1|1|4","878:45-878:58|-1|1|4","885:45-885:58|-1|1|4","892:26-892:39|-1|1|4","892:48-892:61|-1|1|4","899:28-899:41|-1|1|4","899:50-899:63|-1|1|4","906:29-906:42|-1|1|4","906:51-906:64|-1|1|4","913:46-913:59|-1|1|4","1070:42-1070:55|-1|1|4","1072:42-1072:55|-1|1|4","1083:27-1083:40|-1|1|4","1085:27-1085:40|-1|1|4","1236:41-1236:54|-1|1|4","1260:43-1260:56|-1|1|4"]},{"id":16,"usr":9902271146873654022,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["203:29-203:42|-1|1|4","1096:27-1096:40|-1|1|4","1335:56-1335:69|-1|1|4","1338:46-1338:59|-1|1|4","1420:56-1420:69|-1|1|4","1423:46-1423:59|-1|1|4"]},{"id":17,"usr":12969172306692938079,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["212:29-212:42|-1|1|4","1145:27-1145:40|-1|1|4","1159:48-1159:61|-1|1|4","1170:48-1170:61|-1|1|4"]},{"id":18,"usr":5609722413052049945,"detailed_name":"vex::mevent","short_name_offset":5,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[12,13,14,15,16,27,28,29,30,31,32,33,34,35,36,37,42,45,47,54,56,59,60,61],"uses":["214:11-214:17|-1|1|4","215:11-215:17|-1|1|4","216:11-216:17|-1|1|4","218:11-218:17|-1|1|4","219:11-219:17|-1|1|4","297:9-297:15|-1|1|4","298:9-298:15|-1|1|4","299:9-299:15|-1|1|4","300:9-300:15|-1|1|4","301:9-301:15|-1|1|4","366:9-366:15|-1|1|4","367:9-367:15|-1|1|4","425:9-425:15|-1|1|4","426:9-426:15|-1|1|4","477:9-477:15|-1|1|4","478:9-478:15|-1|1|4","664:9-664:15|-1|1|4","716:9-716:15|-1|1|4","769:9-769:15|-1|1|4","915:9-915:15|-1|1|4","971:9-971:15|-1|1|4","1024:9-1024:15|-1|1|4","1107:9-1107:15|-1|1|4","1156:9-1156:15|-1|1|4"]},{"id":19,"usr":15620256702126280030,"detailed_name":"vex::limit","short_name_offset":5,"short_name_size":5,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with the limit switch","declarations":["323:9-323:14|-1|1|4","324:10-324:15|-1|1|4"],"spell":"313:9-313:14|0|2|2","extent":"313:3-368:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[40,41,42,43,44,45,46,47],"vars":[32,33],"instances":[],"uses":["323:9-323:14|19|2|4"]},{"id":20,"usr":8518972014115105283,"detailed_name":"vex::bumper","short_name_offset":5,"short_name_size":6,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with the bumper device","declarations":["382:9-382:15|-1|1|4","383:10-383:16|-1|1|4"],"spell":"373:9-373:15|0|2|2","extent":"373:3-427:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[48,49,50,51,52,53,54,55],"vars":[34,35],"instances":[],"uses":["382:9-382:15|20|2|4"]},{"id":21,"usr":2832760895183346873,"detailed_name":"vex::digital_in","short_name_offset":5,"short_name_size":10,"kind":5,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro} \r\n @brief Use this class when programming with a digital-in device","declarations":["442:9-442:19|-1|1|4","443:10-443:20|-1|1|4"],"spell":"432:9-432:19|0|2|2","extent":"432:3-479:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[56,57,58,59,60,61,62],"vars":[36,37],"instances":[],"uses":["442:9-442:19|21|2|4"]},{"id":22,"usr":15494287226726290542,"detailed_name":"vex::digital_out","short_name_offset":5,"short_name_size":11,"kind":5,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro} \r\n @brief Use this class when programming with a digital-out device.","declarations":["494:9-494:20|-1|1|4","495:10-495:21|-1|1|4","531:22-531:33|-1|1|4","565:29-565:40|-1|1|4"],"spell":"484:9-484:20|0|2|2","extent":"484:3-525:4|0|2|0","bases":[13],"derived":[23,24],"types":[],"funcs":[63,64,65,66,67,68,69],"vars":[],"instances":[],"uses":["494:9-494:20|22|2|4","531:22-531:33|-1|1|4","565:29-565:40|-1|1|4"]},{"id":23,"usr":16204249986995676230,"detailed_name":"vex::led","short_name_offset":5,"short_name_size":3,"kind":5,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro} \r\n @brief Use this class when programming with a led device.","declarations":["541:9-541:12|-1|1|4","542:10-542:13|-1|1|4"],"spell":"531:9-531:12|0|2|2","extent":"531:3-559:4|0|2|0","bases":[22],"derived":[],"types":[],"funcs":[70,71,72,73],"vars":[],"instances":[],"uses":["541:9-541:12|23|2|4"]},{"id":24,"usr":2532378305847046812,"detailed_name":"vex::pneumatics","short_name_offset":5,"short_name_size":10,"kind":5,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro} \r\n @brief Use this class when programming with a pneumatics device.","declarations":["575:9-575:19|-1|1|4","576:10-576:20|-1|1|4"],"spell":"565:9-565:19|0|2|2","extent":"565:3-593:4|0|2|0","bases":[22],"derived":[],"types":[],"funcs":[74,75,76,77],"vars":[],"instances":[],"uses":["575:9-575:19|24|2|4"]},{"id":25,"usr":8689778855792769856,"detailed_name":"vex::pot","short_name_offset":5,"short_name_size":3,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a potentiometer.","declarations":["610:9-610:12|-1|1|4","611:10-611:13|-1|1|4"],"spell":"600:9-600:12|0|2|2","extent":"600:3-665:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[78,79,80,81,82,83,84,85],"vars":[42],"instances":[],"uses":["610:9-610:12|25|2|4"]},{"id":26,"usr":13233960938812283541,"detailed_name":"vex::percentUnits","short_name_offset":5,"short_name_size":12,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[38,40,44,46,51,55,58,65,73,79],"uses":["632:26-632:38|-1|1|4","636:26-636:38|-1|1|4","692:33-692:45|-1|1|4","692:54-692:66|-1|1|4","703:26-703:38|-1|1|4","745:31-745:43|-1|1|4","745:52-745:64|-1|1|4","756:26-756:38|-1|1|4","823:26-823:38|-1|1|4","952:26-952:38|-1|1|4","1011:26-1011:38|-1|1|4","1198:36-1198:48|-1|1|4","1226:42-1226:54|-1|1|4","1247:44-1247:56|-1|1|4","1305:44-1305:56|-1|1|4","1337:56-1337:68|-1|1|4","1390:44-1390:56|-1|1|4","1422:56-1422:68|-1|1|4"]},{"id":27,"usr":14068812907132680229,"detailed_name":"vex::line","short_name_offset":5,"short_name_size":4,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a line follower.","declarations":["680:9-680:13|-1|1|4","681:10-681:14|-1|1|4"],"spell":"670:9-670:13|0|2|2","extent":"670:3-717:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[86,87,88,89,90,91],"vars":[45],"instances":[],"uses":["680:9-680:13|27|2|4"]},{"id":28,"usr":5548479328449531364,"detailed_name":"vex::light","short_name_offset":5,"short_name_size":5,"kind":5,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro} \r\n @brief Use this class when programming with a light sensor.","declarations":["732:9-732:14|-1|1|4","733:10-733:15|-1|1|4"],"spell":"722:9-722:14|0|2|2","extent":"722:3-770:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[92,93,94,95,96,97],"vars":[47],"instances":[],"uses":["732:9-732:14|28|2|4"]},{"id":29,"usr":11843246473407549820,"detailed_name":"vex::gyro","short_name_offset":5,"short_name_size":4,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a gyro sensor.","declarations":["790:9-790:13|-1|1|4","791:10-791:14|-1|1|4"],"spell":"775:9-775:13|0|2|2","extent":"775:3-916:4|0|2|0","bases":[13,30],"derived":[],"types":[],"funcs":[98,99,101,102,103,104,105,107,109,110,111,112,113,114,116,118,120,122],"vars":[48,49,50,54],"instances":[],"uses":["790:9-790:13|29|2|4"]},{"id":30,"usr":12815581998195072843,"detailed_name":"vex::guido","short_name_offset":5,"short_name_size":5,"kind":0,"hover":"","comments":"","declarations":["775:44-775:49|-1|1|4"],"bases":[],"derived":[29],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["775:44-775:49|-1|1|4"]},{"id":31,"usr":16174117496904612866,"detailed_name":"vex::accelerometer","short_name_offset":5,"short_name_size":13,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with an accelerometer sensor.","declarations":["931:9-931:22|-1|1|4","932:10-932:23|-1|1|4"],"spell":"921:9-921:22|0|2|2","extent":"921:3-975:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[124,125,126,127,128,129],"vars":[56,57],"instances":[],"uses":["931:9-931:22|31|2|4"]},{"id":32,"usr":3,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[57,68,70,74,76],"uses":[]},{"id":33,"usr":2061189157793251399,"detailed_name":"vex::analog_in","short_name_offset":5,"short_name_size":9,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with an analog-in device.","declarations":["990:9-990:18|-1|1|4","991:10-991:19|-1|1|4"],"spell":"980:9-980:18|0|2|2","extent":"980:3-1025:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[130,131,132,133,134],"vars":[59],"instances":[],"uses":["990:9-990:18|33|2|4"]},{"id":34,"usr":188659887562338705,"detailed_name":"vex::encoder","short_name_offset":5,"short_name_size":7,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with an encoder.","declarations":["1040:9-1040:16|-1|1|4","1041:10-1041:17|-1|1|4"],"spell":"1030:9-1030:16|0|2|2","extent":"1030:3-1108:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[135,136,137,138,139,140,141,142,143,144,145],"vars":[60],"instances":[],"uses":["1040:9-1040:16|34|2|4"]},{"id":35,"usr":4391518431818245250,"detailed_name":"vex::sonar","short_name_offset":5,"short_name_size":5,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a sonar sensor.","declarations":["1123:9-1123:14|-1|1|4","1124:10-1124:15|-1|1|4"],"spell":"1113:9-1113:14|0|2|2","extent":"1113:3-1171:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[146,147,148,149,150,151,152,153,154],"vars":[61,62,63],"instances":[],"uses":["1123:9-1123:14|35|2|4"]},{"id":36,"usr":4798135242787498748,"detailed_name":"vex::pwm_out","short_name_offset":5,"short_name_size":7,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a pwm-out device.","declarations":["1186:9-1186:16|-1|1|4","1187:10-1187:17|-1|1|4"],"spell":"1176:9-1176:16|0|2|2","extent":"1176:3-1199:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[155,156,157],"vars":[],"instances":[],"uses":["1186:9-1186:16|36|2|4"]},{"id":37,"usr":9659090348979825724,"detailed_name":"vex::servo","short_name_offset":5,"short_name_size":5,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a servo device.","declarations":["1214:9-1214:14|-1|1|4","1215:10-1215:15|-1|1|4"],"spell":"1204:9-1204:14|0|2|2","extent":"1204:3-1263:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[158,159,160,161,162,163],"vars":[],"instances":[],"uses":["1214:9-1214:14|37|2|4"]},{"id":38,"usr":22,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[66,72,78],"uses":[]},{"id":39,"usr":3283425963657057559,"detailed_name":"vex::motor29","short_name_offset":5,"short_name_size":7,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming a motor connected to a motor controller 29.","declarations":["1283:9-1283:16|-1|1|4","1293:9-1293:16|-1|1|4","1294:10-1294:17|-1|1|4"],"spell":"1268:9-1268:16|0|2|2","extent":"1268:3-1348:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[164,165,166,167,168,169,170,171,172],"vars":[68,69,70],"instances":[],"uses":["1283:9-1283:16|39|2|4","1293:9-1293:16|39|2|4"]},{"id":40,"usr":2002947408905702631,"detailed_name":"vex::directionType","short_name_offset":5,"short_name_size":13,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[71,77],"uses":["1324:20-1324:33|-1|1|4","1335:20-1335:33|-1|1|4","1337:20-1337:33|-1|1|4","1409:20-1409:33|-1|1|4","1420:20-1420:33|-1|1|4","1422:20-1422:33|-1|1|4"]},{"id":41,"usr":12267479175068488160,"detailed_name":"vex::motor_victor","short_name_offset":5,"short_name_size":12,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a motor connected to a victor motor controller.","declarations":["1368:9-1368:21|-1|1|4","1378:9-1378:21|-1|1|4","1379:10-1379:22|-1|1|4"],"spell":"1353:9-1353:21|0|2|2","extent":"1353:3-1433:6|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[173,174,175,176,177,178,179,180,181],"vars":[74,75,76],"instances":[],"uses":["1368:9-1368:21|41|2|4","1378:9-1378:21|41|2|4"]}],"funcs":[{"id":0,"usr":17801833967830827767,"detailed_name":"void vex::triport::_setport()","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"41:12-41:20|2|2|2","extent":"41:7-41:25|2|2|0","declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":7897482006368328335,"detailed_name":"void vex::triport::_configPort(uint32_t id, vex::triportType type)","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"42:12-42:23|2|2|1","param_spellings":["42:34-42:36","42:50-42:54"]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":8273333952169982073,"detailed_name":"void vex::triport::_setport(first port, Args... args)","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"45:12-45:20|2|2|2","extent":"45:7-45:48|2|2|0","declaring_type":2,"bases":[],"derived":[],"vars":[4,5],"uses":[],"callees":[]},{"id":3,"usr":2682546760874825531,"detailed_name":"int32_t vex::triport::_getIndex()","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"50:15-50:24|2|2|1","param_spellings":[]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":["214:52-214:61|12|2|32","215:52-215:61|12|2|32","216:52-216:61|12|2|32"],"callees":[]},{"id":4,"usr":10943035773614555501,"detailed_name":"V5_AdiPortConfiguration vex::triport::_internalType(vex::triportType type)","short_name_offset":38,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"53:33-53:46|2|2|1","param_spellings":["53:60-53:64"]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":2287044195653121759,"detailed_name":"vex::triportType vex::triport::_externalType(V5_AdiPortConfiguration type)","short_name_offset":31,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"54:33-54:46|2|2|1","param_spellings":["54:72-54:76"]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":15532113077461569567,"detailed_name":"void vex::triport::triport(int32_t index)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"57:7-57:14|2|2|1","param_spellings":["57:24-57:29"]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":15701364086338320736,"detailed_name":"void vex::triport::~triport() noexcept","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"58:7-58:15|2|2|1","param_spellings":[]}],"declaring_type":2,"bases":[8],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":3786715308563046211,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[7],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":4457648244774009117,"detailed_name":"void vex::triport::triport(int32_t index, Args... args)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"","declarations":[],"spell":"61:7-61:14|2|2|2","extent":"61:7-61:44|2|2|0","declaring_type":2,"bases":[],"derived":[],"vars":[6,7],"uses":[],"callees":[]},{"id":10,"usr":17807885584382865584,"detailed_name":"bool vex::triport::installed()","short_name_offset":19,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the status of what is installed on the port.\r\n@return Returns true if a 3-Wire Port device is installed in the port, otherwise false.","declarations":[{"spell":"70:23-70:32|2|2|1","param_spellings":[]}],"declaring_type":2,"bases":[11],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":15816097909238292831,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[10],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":1419849057999895701,"detailed_name":"int32_t vex::triport::port::_convertAnalog(vex::analogUnits units)","short_name_offset":28,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"82:21-82:35|12|2|1","param_spellings":["82:49-82:54"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":10881329654539706783,"detailed_name":"int32_t vex::triport::port::_virtual_value(int32_t virtual_port)","short_name_offset":28,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"83:21-83:35|12|2|1","param_spellings":["83:45-83:57"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":12368680452725606588,"detailed_name":"void vex::triport::port::port()","short_name_offset":13,"short_name_size":4,"kind":9,"storage":1,"hover":"","comments":"","declarations":[],"spell":"86:11-86:15|12|2|2","extent":"86:11-86:47|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":782344196418780998,"detailed_name":"void vex::triport::port::port(const int32_t id, vex::triport *parent)","short_name_offset":13,"short_name_size":4,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"87:11-87:15|12|2|1","param_spellings":["87:31-87:33","87:44-87:50"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":["224:24-224:33|2|2|288","225:24-225:33|2|2|288","226:24-226:33|2|2|288","227:24-227:33|2|2|288","228:24-228:33|2|2|288","229:24-229:33|2|2|288","230:24-230:33|2|2|288","231:24-231:33|2|2|288"],"callees":[]},{"id":16,"usr":360523044136543266,"detailed_name":"void vex::triport::port::port(const int32_t id, const vex::triportType type, vex::triport *parent)","short_name_offset":13,"short_name_size":4,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"88:11-88:15|12|2|1","param_spellings":["88:31-88:33","88:53-88:57","88:68-88:74"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":8010592887028420193,"detailed_name":"void vex::triport::port::~port() noexcept","short_name_offset":25,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"89:11-89:16|12|2|2","extent":"89:11-89:21|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":9814417834967813633,"detailed_name":"void vex::triport::port::type(const vex::triportType type)","short_name_offset":25,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Sets the port to a specific port type.\r\n@param type A type of port that you want to set it to.","declarations":[{"spell":"97:16-97:20|12|2|1","param_spellings":["97:40-97:44"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":["158:19-158:23|26|3|32"],"callees":[]},{"id":19,"usr":16455694137275251885,"detailed_name":"vex::triportType vex::triport::port::type()","short_name_offset":37,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the current port type.\r\n@return Returns the Port Type.","declarations":[{"spell":"105:23-105:27|12|2|1","param_spellings":[]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":1570609720114122916,"detailed_name":"void vex::triport::port::value(int32_t value)","short_name_offset":25,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Sets the port's value to the specified integer in the parameter. \r\n@param value An integer number that will be set to the port's value.","declarations":[{"spell":"113:21-113:26|12|2|1","param_spellings":["113:36-113:41"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":["161:19-161:24|27|3|32"],"callees":[]},{"id":21,"usr":4826109805981223583,"detailed_name":"int32_t vex::triport::port::value()","short_name_offset":28,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the value of a port.\r\n@return Returns an integer that represents the port's value.","declarations":[{"spell":"121:21-121:26|12|2|1","param_spellings":[]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":["164:26-164:31|28|3|32","167:27-167:32|29|3|32"],"callees":[]},{"id":22,"usr":5145594116072304612,"detailed_name":"void vex::triport::port::set(bool value)","short_name_offset":25,"short_name_size":3,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Sets the value of the port to a Boolean value.\r\n@param value A true or false Boolean value that the port will be set to.","declarations":[{"spell":"129:21-129:24|12|2|1","param_spellings":["129:31-129:36"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":16614726809120142055,"detailed_name":"void vex::triport::port::pressed(void (*)() callback)","short_name_offset":25,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Calls back a function when the port is pressed.\r\n@param callback A reference to a function.","declarations":[{"spell":"138:20-138:27|12|2|1","param_spellings":["138:37-138:45"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":14650134078297585491,"detailed_name":"void vex::triport::port::released(void (*)() callback)","short_name_offset":25,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Calls back a function when the port is released.\r\n@param callback A reference to a function.","declarations":[{"spell":"146:20-146:28|12|2|1","param_spellings":["146:38-146:46"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":6600724912140663173,"detailed_name":"void vex::triport::port::changed(void (*)() callback)","short_name_offset":25,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Calls back a function when the port has changed value.\r\n@param callback A reference to a function.","declarations":[{"spell":"154:20-154:27|12|2|1","param_spellings":["154:37-154:45"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":2865351536613894399,"detailed_name":"void vex::triport::port::operator()(const vex::triportType type)","short_name_offset":25,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"157:16-157:26|12|2|2","extent":"157:11-159:12|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[10],"uses":[],"callees":["158:19-158:23|18|3|32"]},{"id":27,"usr":1082603803838364107,"detailed_name":"void vex::triport::port::operator=(const int32_t value)","short_name_offset":25,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"160:16-160:25|12|2|2","extent":"160:11-162:12|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[11],"uses":[],"callees":["161:19-161:24|20|3|32"]},{"id":28,"usr":9270276694801486968,"detailed_name":"int vex::triport::port::operator int()","short_name_offset":24,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[],"spell":"163:11-163:23|12|2|2","extent":"163:11-165:12|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["164:26-164:31|21|3|32"]},{"id":29,"usr":9774127917934000460,"detailed_name":"bool vex::triport::port::operator bool()","short_name_offset":25,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"","declarations":[],"spell":"166:11-166:24|12|2|2","extent":"166:11-168:12|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["167:27-167:32|21|3|32"]},{"id":30,"usr":6879533738461468161,"detailed_name":"void vex::triport::port::resetRotation()","short_name_offset":25,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Resets the rotation of the encoder to zero.","declarations":[{"spell":"176:19-176:32|12|2|1","param_spellings":[]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":6251771076573549965,"detailed_name":"void vex::triport::port::setRotation(double val, vex::rotationUnits units)","short_name_offset":25,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Sets the rotation of the encoder to a specific value.\r\n@param val A double that represents the value to set the rotation to.\r\n@param units The unit type that the previous value should be treated as.","declarations":[{"spell":"185:19-185:30|12|2|1","param_spellings":["185:39-185:42","185:58-185:63"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":6651320802302635162,"detailed_name":"double vex::triport::port::rotation(vex::rotationUnits units)","short_name_offset":27,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the rotation value of the encoder.\r\n@return Returns a double that represents the current rotation of the encoder.\r\n@param units A unit type that defines what value of rotation that should be returned.","declarations":[{"spell":"194:19-194:27|12|2|1","param_spellings":["194:43-194:48"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":8686066992317197674,"detailed_name":"double vex::triport::port::velocity(vex::velocityUnits units)","short_name_offset":27,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the velocity of the encoder.\r\n@return Returns a double that represents the current velocity of the encoder.\r\n@param units A unit type that defines what value of velocity that should be returned.","declarations":[{"spell":"203:19-203:27|12|2|1","param_spellings":["203:43-203:48"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":12998363279193821081,"detailed_name":"double vex::triport::port::distance(vex::distanceUnits units)","short_name_offset":27,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the value of the distance sensor.\r\n@return Returns a double that represents the current distance of the sensor.\r\n@param units A distance unit type that defines what value of distance that should be returned.","declarations":[{"spell":"212:19-212:27|12|2|1","param_spellings":["212:43-212:48"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":8236992157830197032,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["214:29-214:119|12|2|288","215:29-215:119|12|2|288","216:29-216:119|12|2|288"],"callees":[]},{"id":36,"usr":4753535292544594204,"detailed_name":"int32_t vex::__tridevice::_convertAnalog(vex::analogUnits units)","short_name_offset":26,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"294:19-294:33|13|2|1","param_spellings":["294:47-294:52"]}],"declaring_type":13,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":16419045655326798814,"detailed_name":"int32_t vex::__tridevice::_virtual_value(int32_t virtual_port)","short_name_offset":26,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"295:19-295:33|13|2|1","param_spellings":["295:43-295:55"]}],"declaring_type":13,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":3188304105787490026,"detailed_name":"void vex::__tridevice::__tridevice(triport::port &port, vex::triportType type)","short_name_offset":10,"short_name_size":11,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"304:9-304:20|13|2|1","param_spellings":["304:37-304:41","304:55-304:59"]}],"declaring_type":13,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":15593876102552983633,"detailed_name":"void vex::__tridevice::~__tridevice()","short_name_offset":23,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"306:9-306:21|13|2|1","param_spellings":[]}],"declaring_type":13,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":11411439005838242726,"detailed_name":"void vex::limit::limit(triport::port &port)","short_name_offset":10,"short_name_size":5,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::limit Limit = vex::limit(Brain.ThreeWirePort.A);}\r\n@brief Creates a new limit object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"323:9-323:14|19|2|1","param_spellings":["323:31-323:35"]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":15800421073228516722,"detailed_name":"void vex::limit::~limit()","short_name_offset":17,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"324:9-324:15|19|2|1","param_spellings":[]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":42,"usr":11764919033543058506,"detailed_name":"int32_t vex::limit::value()","short_name_offset":20,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@block_sig{Limit.value()}\r\n@brief Gets the value of the limit switch\r\n@return Returns an integer that represents the value of the limit device.","declarations":[{"spell":"333:19-333:24|19|2|1","param_spellings":[]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":["343:39-343:44|43|3|32"],"callees":[]},{"id":43,"usr":7517757565452688389,"detailed_name":"int32_t vex::limit::pressing()","short_name_offset":20,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Limit.pressing()}\r\n@return_type_override{bool}\r\n@brief Gets the state of the limit device.\r\n@return Returns the state of the limit device.","declarations":[],"spell":"343:19-343:27|19|2|2","extent":"343:9-343:49|19|2|0","declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["343:39-343:44|42|3|32"]},{"id":44,"usr":18191725025276820662,"detailed_name":"void vex::limit::pressed(void (*)() callback)","short_name_offset":17,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Limit.pressed(pressedFunction);}\r\n@brief Calls a function when the limit switch is pressed.\r\n@param callback A reference to a function.","declarations":[{"spell":"352:19-352:26|19|2|1","param_spellings":["352:36-352:44"]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":45,"usr":10784886544997377842,"detailed_name":"void vex::limit::released(void (*)() callback)","short_name_offset":17,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Limit.released(releasedFunction);}\r\n@brief Calls a function when the limit switch is released.\r\n@param callback A reference to a function.","declarations":[{"spell":"361:19-361:27|19|2|1","param_spellings":["361:37-361:45"]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":46,"usr":10915898523202274949,"detailed_name":"int vex::limit::operator int()","short_name_offset":16,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"363:9-363:21|19|2|1","param_spellings":[]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":47,"usr":15488606114961570538,"detailed_name":"bool vex::limit::operator bool()","short_name_offset":17,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"364:9-364:22|19|2|1","param_spellings":[]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":48,"usr":996587204434591092,"detailed_name":"void vex::bumper::bumper(triport::port &port)","short_name_offset":10,"short_name_size":6,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::bumper Bumper = vex::bumper(Brain.ThreeWirePort.A);}\r\n@brief Creates a new bumper object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"382:9-382:15|20|2|1","param_spellings":["382:32-382:36"]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":49,"usr":9926818344111669173,"detailed_name":"void vex::bumper::~bumper()","short_name_offset":18,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"383:9-383:16|20|2|1","param_spellings":[]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":50,"usr":4528052738585537310,"detailed_name":"int32_t vex::bumper::value()","short_name_offset":21,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@block_sig{Bumper.value()}\r\n@brief Gets the value of the bumper device.\r\n@return Returns an integer that represents the value of the bumper device.","declarations":[{"spell":"392:19-392:24|20|2|1","param_spellings":[]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":["402:39-402:44|51|3|32"],"callees":[]},{"id":51,"usr":18226640971959250641,"detailed_name":"int32_t vex::bumper::pressing()","short_name_offset":21,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Bumper.pressing()}\r\n@return_type_override{bool}\r\n@brief Get the pressed status of the bumper device.\r\n@return Returns the state of the bumper device. If it is pressed it will return a one. If unpressed, it will return a zero.","declarations":[],"spell":"402:19-402:27|20|2|2","extent":"402:9-402:49|20|2|0","declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["402:39-402:44|50|3|32"]},{"id":52,"usr":3597663717362175292,"detailed_name":"void vex::bumper::pressed(void (*)() callback)","short_name_offset":18,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Bumper.pressed(pressedFunction);}\r\n@brief Calls a function when the bumper switch is pressed.\r\n@param callback A reference to a function.","declarations":[{"spell":"411:19-411:26|20|2|1","param_spellings":["411:36-411:44"]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":53,"usr":870864726503293301,"detailed_name":"void vex::bumper::released(void (*)() callback)","short_name_offset":18,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Bumper.released(releasedFunction);}\r\n@brief Calls a function when the bumper switch is released.\r\n@param callback A reference to a function.","declarations":[{"spell":"420:19-420:27|20|2|1","param_spellings":["420:37-420:45"]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":54,"usr":906831332238531883,"detailed_name":"int vex::bumper::operator int()","short_name_offset":17,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"422:9-422:21|20|2|1","param_spellings":[]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":55,"usr":7321494511791712097,"detailed_name":"bool vex::bumper::operator bool()","short_name_offset":18,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"423:9-423:22|20|2|1","param_spellings":[]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":56,"usr":7473562854000021874,"detailed_name":"void vex::digital_in::digital_in(triport::port &port)","short_name_offset":10,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::digital_in Digital_in = vex::digital_in(Brain.ThreeWirePort.A);}\r\n@brief Creates a new digital-in object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"442:9-442:19|21|2|1","param_spellings":["442:36-442:40"]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":57,"usr":355111189135392440,"detailed_name":"void vex::digital_in::~digital_in()","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"443:9-443:20|21|2|1","param_spellings":[]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":58,"usr":1010115263357273031,"detailed_name":"int32_t vex::digital_in::value()","short_name_offset":25,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{DigitalIn.value()}\r\n@brief Gets the value of the digital-in device.\r\n@return Returns an integer that represents the value of the digital-in device.","declarations":[{"spell":"452:19-452:24|21|2|1","param_spellings":[]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":59,"usr":5135144458374767997,"detailed_name":"void vex::digital_in::high(void (*)() callback)","short_name_offset":22,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{DigitalIn.high(pressedFunction);}\r\n@brief Calls a function when the digital input goes high.\r\n@param callback A reference to a function.","declarations":[{"spell":"461:19-461:23|21|2|1","param_spellings":["461:33-461:41"]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":60,"usr":1814642736324665881,"detailed_name":"void vex::digital_in::low(void (*)() callback)","short_name_offset":22,"short_name_size":3,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{DigitalIn.low(releasedFunction);}\r\n@brief Calls a function when the digital input goes low.\r\n@param callback A reference to a function.","declarations":[{"spell":"470:19-470:22|21|2|1","param_spellings":["470:32-470:40"]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":61,"usr":18312915212765305106,"detailed_name":"int vex::digital_in::operator int()","short_name_offset":21,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"472:9-472:21|21|2|1","param_spellings":[]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":62,"usr":10013611948731339564,"detailed_name":"bool vex::digital_in::operator bool()","short_name_offset":22,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"473:9-473:22|21|2|1","param_spellings":[]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":63,"usr":15716122994892812285,"detailed_name":"void vex::digital_out::digital_out(triport::port &port)","short_name_offset":10,"short_name_size":11,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::digital_out Digital_out = vex::digital_out(Brain.ThreeWirePort.A);}\r\n@brief Creates a new digital-out object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"494:9-494:20|22|2|1","param_spellings":["494:37-494:41"]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":64,"usr":16019882191136053338,"detailed_name":"void vex::digital_out::~digital_out()","short_name_offset":23,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"495:9-495:21|22|2|1","param_spellings":[]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":65,"usr":6888789065117327911,"detailed_name":"int32_t vex::digital_out::value()","short_name_offset":26,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{DigitalOut.value()}\r\n@brief Gets the value of the digital-out device.\r\n@return Returns an integer that represents the value of the digital-out device.","declarations":[{"spell":"504:19-504:24|22|2|1","param_spellings":[]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":66,"usr":311132200947991291,"detailed_name":"void vex::digital_out::set(bool value)","short_name_offset":23,"short_name_size":3,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{DigitalOut.set(true);}\r\n@brief Sets the digital-out device to a Boolean value.\r\n@param value A true or false Boolean value.","declarations":[{"spell":"513:19-513:22|22|2|1","param_spellings":["513:29-513:34"]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":67,"usr":3930798963768847771,"detailed_name":"int vex::digital_out::operator int()","short_name_offset":22,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"514:9-514:21|22|2|1","param_spellings":[]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":68,"usr":16370125128715911350,"detailed_name":"bool vex::digital_out::operator bool()","short_name_offset":23,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"515:9-515:22|22|2|1","param_spellings":[]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":69,"usr":5530409990563753796,"detailed_name":"void vex::digital_out::operator=(const int32_t value)","short_name_offset":23,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@block_sig{DigitalOut.operator(1);}\r\n@brief Sets the output value of the digital-out device.\r\n@param value The value to set the digital-out device. Typically 1 or 0.","declarations":[{"spell":"524:14-524:23|22|2|1","param_spellings":["524:39-524:44"]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":70,"usr":3383588432254051756,"detailed_name":"void vex::led::led(triport::port &port)","short_name_offset":10,"short_name_size":3,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::led Led = vex::led(Brain.ThreeWirePort.A);}\r\n@brief Creates a new led object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"541:9-541:12|23|2|1","param_spellings":["541:29-541:33"]}],"declaring_type":23,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":71,"usr":17180230655620356450,"detailed_name":"void vex::led::~led()","short_name_offset":15,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"542:9-542:13|23|2|1","param_spellings":[]}],"declaring_type":23,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":72,"usr":8225869693394134951,"detailed_name":"void vex::led::on()","short_name_offset":15,"short_name_size":2,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Led.on();}\r\n@brief Sets the led device to the on state.","declarations":[{"spell":"550:19-550:21|23|2|1","param_spellings":[]}],"declaring_type":23,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":73,"usr":8969551778752391066,"detailed_name":"void vex::led::off()","short_name_offset":15,"short_name_size":3,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Led.off();}\r\n@brief Sets the led device to the off state.","declarations":[{"spell":"558:19-558:22|23|2|1","param_spellings":[]}],"declaring_type":23,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":74,"usr":10949353632989872689,"detailed_name":"void vex::pneumatics::pneumatics(triport::port &port)","short_name_offset":10,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::pneumatics Pneumatics = vex::pneumatics(Brain.ThreeWirePort.A);}\r\n@brief Creates a new pneumatics object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"575:9-575:19|24|2|1","param_spellings":["575:36-575:40"]}],"declaring_type":24,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":75,"usr":2510851391905025825,"detailed_name":"void vex::pneumatics::~pneumatics()","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"576:9-576:20|24|2|1","param_spellings":[]}],"declaring_type":24,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":76,"usr":14674412131819825978,"detailed_name":"void vex::pneumatics::open()","short_name_offset":22,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Pneumatics.open();}\r\n@brief Sets the pneumatics device to the solenoid open state allowing air to flow into the cylinder.","declarations":[{"spell":"584:19-584:23|24|2|1","param_spellings":[]}],"declaring_type":24,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":77,"usr":5820201929176217332,"detailed_name":"void vex::pneumatics::close()","short_name_offset":22,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Pneumatics.close();}\r\n@brief Sets the pneumatics device to the solenoid close state stopping air flowing into the cylinder.","declarations":[{"spell":"592:19-592:24|24|2|1","param_spellings":[]}],"declaring_type":24,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":78,"usr":1566374075531847638,"detailed_name":"void vex::pot::pot(triport::port &port)","short_name_offset":10,"short_name_size":3,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::pot Pot = vex::pot(Brain.ThreeWirePort.A);}\r\n@brief Creates a new pot object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"610:9-610:12|25|2|1","param_spellings":["610:29-610:33"]}],"declaring_type":25,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":79,"usr":4850866754560276200,"detailed_name":"void vex::pot::~pot()","short_name_offset":15,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"611:9-611:13|25|2|1","param_spellings":[]}],"declaring_type":25,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":80,"usr":17972016260335326308,"detailed_name":"int32_t vex::pot::value(vex::analogUnits units)","short_name_offset":18,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Pot.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the potentiometer in the units defined in the parameter.\r\n@return Returns an integer that represents the unit value specified by the parameter of the potentiometer device.\r\n@param units The measurement unit for the potentiometer device.","declarations":[{"spell":"621:19-621:24|25|2|1","param_spellings":["621:38-621:43"]}],"declaring_type":25,"bases":[],"derived":[],"vars":[],"uses":["633:18-633:23|81|3|32"],"callees":[]},{"id":81,"usr":14593166862705151681,"detailed_name":"int32_t vex::pot::value(vex::percentUnits units)","short_name_offset":18,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Pot.value(percent)}\r\n@cpp_sig{Pot.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the potentiometer in the units defined in the parameter.\r\n@return Returns an integer that represents the unit value specified by the parameter of the potentiometer device.\r\n@param units The measurement unit for the potentiometer device.","declarations":[],"spell":"632:19-632:24|25|2|2","extent":"632:9-634:10|25|2|0","declaring_type":25,"bases":[],"derived":[],"vars":[38],"uses":["637:18-637:23|82|3|32"],"callees":["633:18-633:23|80|3|32"]},{"id":82,"usr":11585726941360859570,"detailed_name":"int32_t vex::pot::angle(vex::percentUnits units)","short_name_offset":18,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"636:19-636:24|25|2|2","extent":"636:9-638:10|25|2|0","declaring_type":25,"bases":[],"derived":[],"vars":[40],"uses":[],"callees":["637:18-637:23|81|3|32"]},{"id":83,"usr":15132793344327257959,"detailed_name":"double vex::pot::value(vex::rotationUnits units)","short_name_offset":17,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Pot.value(degrees)}\r\n@cpp_sig{Pot.value(vex::rotationUnits::deg)}\r\n@brief Gets the value of the potentiometer in the units defined in the parameter.\r\n@return Returns an integer that represents the unit value specified by the parameter of the potentiometer device.\r\n@param units The measurement unit for the potentiometer device.","declarations":[{"spell":"649:19-649:24|25|2|1","param_spellings":["649:40-649:45"]}],"declaring_type":25,"bases":[],"derived":[],"vars":[],"uses":["652:18-652:23|84|3|32"],"callees":[]},{"id":84,"usr":12941633549305147135,"detailed_name":"double vex::pot::angle(vex::rotationUnits units)","short_name_offset":17,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"651:19-651:24|25|2|2","extent":"651:9-653:10|25|2|0","declaring_type":25,"bases":[],"derived":[],"vars":[41],"uses":[],"callees":["652:18-652:23|83|3|32"]},{"id":85,"usr":5876864637826333949,"detailed_name":"void vex::pot::changed(void (*)() callback)","short_name_offset":15,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Pot.changed(changedFunction);}\r\n@brief Calls a function when the potentiometer value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"662:19-662:26|25|2|1","param_spellings":["662:36-662:44"]}],"declaring_type":25,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":86,"usr":14228733995734046693,"detailed_name":"void vex::line::line(triport::port &port)","short_name_offset":10,"short_name_size":4,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::line Line = vex::line(Brain.ThreeWirePort.A);}\r\n@brief Creates a new line object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"680:9-680:13|27|2|1","param_spellings":["680:30-680:34"]}],"declaring_type":27,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":87,"usr":8433345819697099490,"detailed_name":"void vex::line::~line()","short_name_offset":16,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"681:9-681:14|27|2|1","param_spellings":[]}],"declaring_type":27,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":88,"usr":9853801528549978736,"detailed_name":"int32_t vex::line::value(vex::analogUnits units)","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Line.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the line follower.\r\n@return Returns an integer that represents the unit value specified by the parameter of the line follower.\r\n@param units The measurement unit for the line device.","declarations":[{"spell":"690:19-690:24|27|2|1","param_spellings":["690:38-690:43"]}],"declaring_type":27,"bases":[],"derived":[],"vars":[],"uses":["704:18-704:23|90|3|32"],"callees":[]},{"id":89,"usr":3267664420424861489,"detailed_name":"int32_t vex::line::reflectivity(vex::percentUnits units)","short_name_offset":19,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"692:19-692:31|27|2|1","param_spellings":["692:46-692:51"]}],"declaring_type":27,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":90,"usr":17753122182496527714,"detailed_name":"int32_t vex::line::value(vex::percentUnits units)","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Line.value(percent)}\r\n@cpp_sig{Line.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the line follower.\r\n@return Returns an integer that represents the unit value specified by the parameter of the line follower.\r\n@param units The measurement unit for the line device.","declarations":[],"spell":"703:19-703:24|27|2|2","extent":"703:9-705:10|27|2|0","declaring_type":27,"bases":[],"derived":[],"vars":[44],"uses":[],"callees":["704:18-704:23|88|3|32"]},{"id":91,"usr":6016968260091259377,"detailed_name":"void vex::line::changed(void (*)() callback)","short_name_offset":16,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Line.changed(changedFunction);}\r\n@brief Calls a function when the line sensor value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"714:19-714:26|27|2|1","param_spellings":["714:36-714:44"]}],"declaring_type":27,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":92,"usr":16936389650215473329,"detailed_name":"void vex::light::light(triport::port &port)","short_name_offset":10,"short_name_size":5,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::light Light = vex::light(Brain.ThreeWirePort.A);}\r\n@brief Creates a new light object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"732:9-732:14|28|2|1","param_spellings":["732:31-732:35"]}],"declaring_type":28,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":93,"usr":2779740572934179208,"detailed_name":"void vex::light::~light()","short_name_offset":17,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"733:9-733:15|28|2|1","param_spellings":[]}],"declaring_type":28,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":94,"usr":13350393414209647609,"detailed_name":"int32_t vex::light::value(vex::analogUnits units)","short_name_offset":20,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Light.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the light sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the light sensor.\r\n@param units The measurement unit for the light device.","declarations":[{"spell":"743:19-743:24|28|2|1","param_spellings":["743:38-743:43"]}],"declaring_type":28,"bases":[],"derived":[],"vars":[],"uses":["757:18-757:23|96|3|32"],"callees":[]},{"id":95,"usr":10103137574632771083,"detailed_name":"int32_t vex::light::brightness(vex::percentUnits units)","short_name_offset":20,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"745:19-745:29|28|2|1","param_spellings":["745:44-745:49"]}],"declaring_type":28,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":96,"usr":7577288956688741652,"detailed_name":"int32_t vex::light::value(vex::percentUnits units)","short_name_offset":20,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Light.value(percent)}\r\n@cpp_sig{Light.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the light sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the light sensor.\r\n@param units The measurement unit for the light device.","declarations":[],"spell":"756:19-756:24|28|2|2","extent":"756:9-758:10|28|2|0","declaring_type":28,"bases":[],"derived":[],"vars":[46],"uses":[],"callees":["757:18-757:23|94|3|32"]},{"id":97,"usr":3140607501656135984,"detailed_name":"void vex::light::changed(void (*)() callback)","short_name_offset":17,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Light.changed(changedFunction);}\r\n@brief Calls a function when the light sensor value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"767:19-767:26|28|2|1","param_spellings":["767:36-767:44"]}],"declaring_type":28,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":98,"usr":13671416634657603273,"detailed_name":"void vex::gyro::gyro(triport::port &port)","short_name_offset":10,"short_name_size":4,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::gyro Gyro = vex::gyro(Brain.ThreeWirePort.A);}\r\n@brief Creates a new gyro object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"790:9-790:13|29|2|1","param_spellings":["790:30-790:34"]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":99,"usr":896826155132529497,"detailed_name":"void vex::gyro::~gyro()","short_name_offset":16,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"791:9-791:14|29|2|1","param_spellings":[]}],"declaring_type":29,"bases":[100],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":100,"usr":6820671489720473049,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[99],"vars":[],"uses":[],"callees":[]},{"id":101,"usr":14087569089855970355,"detailed_name":"int32_t vex::gyro::value(vex::analogUnits units)","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Gyro.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the gyro sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the gyro sensor.\r\n@param units The measurement unit for the gyro device.","declarations":[{"spell":"801:19-801:24|29|2|1","param_spellings":["801:38-801:43"]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":["824:18-824:23|103|3|32"],"callees":[]},{"id":102,"usr":13726596358966504655,"detailed_name":"double vex::gyro::value(vex::rotationUnits units)","short_name_offset":18,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Gyro.value(degrees)}\r\n@cpp_sig{Gyro.value(vex::rotationUnits::deg)}\r\n@brief Gets the value of the gyro sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the gyro sensor.\r\n@param units The measurement unit for the gyro device.","declarations":[{"spell":"812:19-812:24|29|2|1","param_spellings":["812:40-812:45"]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":103,"usr":10264021343337370007,"detailed_name":"int32_t vex::gyro::value(vex::percentUnits units)","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Gyro.value(percent)}\r\n@cpp_sig{Gyro.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the gyro sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the gyro sensor.\r\n@param units The measurement unit for the gyro device.","declarations":[],"spell":"823:19-823:24|29|2|2","extent":"823:9-825:10|29|2|0","declaring_type":29,"bases":[],"derived":[],"vars":[51],"uses":[],"callees":["824:18-824:23|101|3|32"]},{"id":104,"usr":5438384137290036710,"detailed_name":"void vex::gyro::startCalibration(int32_t value)","short_name_offset":16,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{Gyro.startCalibration()}\r\n@brief Starts recalibration of the gyro.\r\n@param value (Optional) Sets the amount of calibration time. By default, this parameter is zero.","declarations":[{"spell":"834:19-834:35|29|2|1","param_spellings":["834:45-834:50"]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":["837:11-837:27|105|3|32"],"callees":[]},{"id":105,"usr":18128911878845389740,"detailed_name":"void vex::gyro::calibrate(int32_t value)","short_name_offset":16,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"836:19-836:28|29|2|2","extent":"836:9-838:10|29|2|0","declaring_type":29,"bases":[106],"derived":[],"vars":[52],"uses":[],"callees":["837:11-837:27|104|3|32"]},{"id":106,"usr":16312459374602267936,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[105],"vars":[],"uses":[],"callees":[]},{"id":107,"usr":8790874470527282738,"detailed_name":"bool vex::gyro::isCalibrating()","short_name_offset":16,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Gyro.isCalibrating()}\r\n@brief Returns true while the gyro sensor is performing a requested recalibration, changing to false once recalibration has completed.\r\n@return Returns true if gyro is still calibrating.","declarations":[{"spell":"847:19-847:32|29|2|1","param_spellings":[]}],"declaring_type":29,"bases":[108],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":108,"usr":4280176584894739212,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[107],"vars":[],"uses":[],"callees":[]},{"id":109,"usr":2094042572219624965,"detailed_name":"void vex::gyro::changed(void (*)() callback)","short_name_offset":16,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Gyro.changed(changedFunction);}\r\n@brief Calls a function when the gyro sensor value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"856:19-856:26|29|2|1","param_spellings":["856:36-856:44"]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":110,"usr":5166967140824080118,"detailed_name":"void vex::gyro::resetAngle()","short_name_offset":16,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief reset the gyro sensor angle to 0","declarations":[{"spell":"861:19-861:29|29|2|1","param_spellings":[]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":111,"usr":9803320622719739780,"detailed_name":"void vex::gyro::resetHeading()","short_name_offset":16,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief reset the gyro sensor angle to 0","declarations":[{"spell":"866:19-866:31|29|2|1","param_spellings":[]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":112,"usr":902157770498688862,"detailed_name":"void vex::gyro::resetRotation()","short_name_offset":16,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief reset the gyro sensor absolute angle to 0","declarations":[{"spell":"871:19-871:32|29|2|1","param_spellings":[]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":113,"usr":9769925796568468503,"detailed_name":"void vex::gyro::resetAngle(double value, vex::rotationUnits units)","short_name_offset":16,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief reset the gyro sensor angle to angle\r\n@param value The new angle for the gyro\r\n@param units The rotation unit for the angle","declarations":[{"spell":"878:19-878:29|29|2|1","param_spellings":["878:38-878:43","878:59-878:64"]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":114,"usr":1206927098205046547,"detailed_name":"void vex::gyro::setHeading(double value, vex::rotationUnits units)","short_name_offset":16,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief reset the gyro sensor angle to angle\r\n@param value The new heading for the gyro\r\n@param units The rotation unit for the angle","declarations":[{"spell":"885:19-885:29|29|2|1","param_spellings":["885:38-885:43","885:59-885:64"]}],"declaring_type":29,"bases":[115],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":115,"usr":4353890793111924518,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[114],"vars":[],"uses":[],"callees":[]},{"id":116,"usr":12733542326215913222,"detailed_name":"double vex::gyro::angle(vex::rotationUnits units)","short_name_offset":18,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief Gets the angle of the gyro sensor.\r\n@return Returns a double that represents the unit value specified by the parameter of the gyro sensor.\r\n@param units The measurement unit for the gyro device.","declarations":[{"spell":"892:19-892:24|29|2|1","param_spellings":["892:40-892:45"]}],"declaring_type":29,"bases":[117],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":117,"usr":3370853944506007426,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[116],"vars":[],"uses":[],"callees":[]},{"id":118,"usr":18012111214138306927,"detailed_name":"double vex::gyro::heading(vex::rotationUnits units)","short_name_offset":18,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief Gets the angle of the gyro sensor.\r\n@return Returns a double that represents the unit value specified by the parameter of the gyro sensor.\r\n@param units The measurement unit for the gyro device.","declarations":[{"spell":"899:19-899:26|29|2|1","param_spellings":["899:42-899:47"]}],"declaring_type":29,"bases":[119],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":119,"usr":3718158389245902852,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[118],"vars":[],"uses":[],"callees":[]},{"id":120,"usr":2213141247795072394,"detailed_name":"double vex::gyro::rotation(vex::rotationUnits units)","short_name_offset":18,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief Gets the rotation (absolute angle) of the gyro sensor.\r\n@return Returns a double that represents the unit value specified by the parameter of the gyro sensor.\r\n@param units The measurement unit for the gyro device.","declarations":[{"spell":"906:19-906:27|29|2|1","param_spellings":["906:43-906:48"]}],"declaring_type":29,"bases":[121],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":121,"usr":2153270473667247714,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[120],"vars":[],"uses":[],"callees":[]},{"id":122,"usr":11950872773839852711,"detailed_name":"void vex::gyro::setRotation(double value, vex::rotationUnits units)","short_name_offset":16,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief set the gyro sensor rotation to angle\r\n@param value The new absolute angle for the gyro\r\n@param units The rotation unit for the angle","declarations":[{"spell":"913:19-913:30|29|2|1","param_spellings":["913:39-913:44","913:60-913:65"]}],"declaring_type":29,"bases":[123],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":123,"usr":4638389475417655755,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[122],"vars":[],"uses":[],"callees":[]},{"id":124,"usr":11479933095531128902,"detailed_name":"void vex::accelerometer::accelerometer(triport::port &port, bool bHighSensitivity)","short_name_offset":10,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::accelerometer Accelerometer = vex::accelerometer(Brain.ThreeWirePort.A);}\r\n@brief Creates a new accelerometer object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"931:9-931:22|31|2|1","param_spellings":["931:39-931:43","931:50-931:66"]}],"declaring_type":31,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":125,"usr":9839307172924070096,"detailed_name":"void vex::accelerometer::~accelerometer()","short_name_offset":25,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"932:9-932:23|31|2|1","param_spellings":[]}],"declaring_type":31,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":126,"usr":3423262237135850349,"detailed_name":"int32_t vex::accelerometer::value(vex::analogUnits units)","short_name_offset":28,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Accelerometer.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the accelerometer.\r\n@return Returns an integer that represents the unit value specified by the parameter of the accelerometer sensor.\r\n@param units The measurement unit for the accelerometer device.","declarations":[{"spell":"941:19-941:24|31|2|1","param_spellings":["941:38-941:43"]}],"declaring_type":31,"bases":[],"derived":[],"vars":[],"uses":["953:18-953:23|127|3|32"],"callees":[]},{"id":127,"usr":4718216744014172748,"detailed_name":"int32_t vex::accelerometer::value(vex::percentUnits units)","short_name_offset":28,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Accelerometer.value(percent)}\r\n@cpp_sig{Accelerometer.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the accelerometer.\r\n@return Returns an integer that represents the unit value specified by the parameter of the accelerometer sensor.\r\n@param units The measurement unit for the accelerometer device.","declarations":[],"spell":"952:19-952:24|31|2|2","extent":"952:9-954:10|31|2|0","declaring_type":31,"bases":[],"derived":[],"vars":[55],"uses":[],"callees":["953:18-953:23|126|3|32"]},{"id":128,"usr":16220932660491021241,"detailed_name":"double vex::accelerometer::acceleration()","short_name_offset":27,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief Gets the value of the accelerometer in G.\r\n@return Returns a double that represents the acceleration in G of the accelerometer sensor.","declarations":[{"spell":"960:19-960:31|31|2|1","param_spellings":[]}],"declaring_type":31,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":129,"usr":8279707948628253362,"detailed_name":"void vex::accelerometer::changed(void (*)() callback)","short_name_offset":25,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Accelerometer.changed(changedFunction);}\r\n@brief Calls a function when the accelerometer value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"969:19-969:26|31|2|1","param_spellings":["969:36-969:44"]}],"declaring_type":31,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":130,"usr":7965305978017738926,"detailed_name":"void vex::analog_in::analog_in(triport::port &port)","short_name_offset":10,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::analog_in Analog_in = vex::analog_in(Brain.ThreeWirePort.A);}\r\n@brief Creates a new analog-in object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"990:9-990:18|33|2|1","param_spellings":["990:35-990:39"]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":131,"usr":2675072086298285676,"detailed_name":"void vex::analog_in::~analog_in()","short_name_offset":21,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"991:9-991:19|33|2|1","param_spellings":[]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":132,"usr":8806569960141111853,"detailed_name":"int32_t vex::analog_in::value(vex::analogUnits units)","short_name_offset":24,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Analog.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the analog-in device.\r\n@return Returns an integer that represents the unit value specified by the parameter of the analog-in device.\r\n@param units The measurement unit for the analog-in device.","declarations":[{"spell":"1001:19-1001:24|33|2|1","param_spellings":["1001:38-1001:43"]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":["1012:18-1012:23|133|3|32"],"callees":[]},{"id":133,"usr":14069155537758725007,"detailed_name":"int32_t vex::analog_in::value(vex::percentUnits units)","short_name_offset":24,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Analog.value(percent)}\r\n@cpp_sig{Analog.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the analog-in device.\r\n@return Returns an integer that represents the unit value specified by the parameter of the analog-in device.\r\n@param units The measurement unit for the analog-in device.","declarations":[],"spell":"1011:19-1011:24|33|2|2","extent":"1011:9-1013:10|33|2|0","declaring_type":33,"bases":[],"derived":[],"vars":[58],"uses":[],"callees":["1012:18-1012:23|132|3|32"]},{"id":134,"usr":9111871247083934825,"detailed_name":"void vex::analog_in::changed(void (*)() callback)","short_name_offset":21,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Analog.changed(changedFunction);}\r\n@brief Calls a function when the analog input value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"1022:19-1022:26|33|2|1","param_spellings":["1022:36-1022:44"]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":135,"usr":10958324432790383774,"detailed_name":"void vex::encoder::encoder(triport::port &port)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::encoder Encoder = vex::encoder(Brain.ThreeWirePort.A);}\r\n@brief Creates a new encoder object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1040:9-1040:16|34|2|1","param_spellings":["1040:33-1040:37"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":136,"usr":16899168643133051834,"detailed_name":"void vex::encoder::~encoder()","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1041:9-1041:17|34|2|1","param_spellings":[]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":137,"usr":12520601331352478690,"detailed_name":"int32_t vex::encoder::value()","short_name_offset":22,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@block_sig{Encoder.value()}\r\n@brief Gets the value of the encoder.\r\n@return Returns an integer that represents the value of the encoder device.","declarations":[{"spell":"1050:19-1050:24|34|2|1","param_spellings":[]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":138,"usr":11972935850275239342,"detailed_name":"int vex::encoder::operator int()","short_name_offset":18,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1051:9-1051:21|34|2|1","param_spellings":[]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":139,"usr":7255753173177116254,"detailed_name":"void vex::encoder::resetRotation()","short_name_offset":19,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro}\r\n @drawer_cat{setting}\r\n @block_sig{Encoder.resetRotation();}\r\n @brief Resets the rotation of the encoder to zero.","declarations":[{"spell":"1059:17-1059:30|34|2|1","param_spellings":[]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":140,"usr":16285687276678208694,"detailed_name":"void vex::encoder::setRotation(double val, vex::rotationUnits units)","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro}\r\n @drawer_cat{setting}\r\n @block_sig{Encoder.setRotation(90, degrees);}\r\n @cpp_sig{Encoder.setRotation(90, vex::rotationUnits::deg);}\r\n @brief Sets the rotation of the encoder to a specific value.\r\n @param val Sets the amount of rotation.\r\n @param units The measurement unit for the rotation value.","declarations":[{"spell":"1070:17-1070:28|34|2|1","param_spellings":["1070:37-1070:40","1070:56-1070:61"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":141,"usr":4551203786438686513,"detailed_name":"void vex::encoder::setPosition(double val, vex::rotationUnits units)","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1072:17-1072:28|34|2|1","param_spellings":["1072:37-1072:40","1072:56-1072:61"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":142,"usr":2729947645988024595,"detailed_name":"double vex::encoder::rotation(vex::rotationUnits units)","short_name_offset":21,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Encoder.rotation(degrees)}\r\n@cpp_sig{Encoder.rotation(vex::rotationUnits::deg)}\r\n@brief Gets the rotation value of the encoder.\r\n@return Returns a double that represents the current rotation of the encoder.\r\n@param units The measurement unit for the encoder device.","declarations":[{"spell":"1083:17-1083:25|34|2|1","param_spellings":["1083:41-1083:46"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":143,"usr":13263563795913328254,"detailed_name":"double vex::encoder::position(vex::rotationUnits units)","short_name_offset":21,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1085:17-1085:25|34|2|1","param_spellings":["1085:41-1085:46"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":144,"usr":16643432974469646568,"detailed_name":"double vex::encoder::velocity(vex::velocityUnits units)","short_name_offset":21,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Encoder.velocity(rpm)}\r\n@cpp_sig{Encoder.velocity(vex::velocityUnits::rpm)}\r\n@brief Gets the velocity of the encoder.\r\n@return Returns a double that represents the current velocity of the encoder.\r\n@param units The measurement unit for the encoder device.","declarations":[{"spell":"1096:17-1096:25|34|2|1","param_spellings":["1096:41-1096:46"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":145,"usr":12978354596891411763,"detailed_name":"void vex::encoder::changed(void (*)() callback)","short_name_offset":19,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Encoder.changed(changedFunction);}\r\n@brief Calls a function when the encoder value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"1105:19-1105:26|34|2|1","param_spellings":["1105:36-1105:44"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":146,"usr":14519203849641320913,"detailed_name":"void vex::sonar::sonar(triport::port &port)","short_name_offset":10,"short_name_size":5,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::sonar Sonar = vex::sonar(Brain.ThreeWirePort.A);}\r\n@brief Creates a new sonar object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1123:9-1123:14|35|2|1","param_spellings":["1123:31-1123:35"]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":147,"usr":8197076092443673648,"detailed_name":"void vex::sonar::~sonar()","short_name_offset":17,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1124:9-1124:15|35|2|1","param_spellings":[]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":148,"usr":8285478633997514509,"detailed_name":"int32_t vex::sonar::value()","short_name_offset":20,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@block_sig{Sonar.value();}\r\n@brief Gets the value of the distance sensor.\r\n@return Returns an integer that represents the value of the sonar sensor.","declarations":[{"spell":"1133:19-1133:24|35|2|1","param_spellings":[]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":149,"usr":10328805431175894358,"detailed_name":"int vex::sonar::operator int()","short_name_offset":16,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1134:9-1134:21|35|2|1","param_spellings":[]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":150,"usr":8526270364967401522,"detailed_name":"double vex::sonar::distance(vex::distanceUnits units)","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Sonar.distance(millimeters)}\r\n@cpp_sig{Sonar.distance(vex::distanceUnits::mm)}\r\n@brief Gets the value of the distance sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the sonar sensor. \r\n@param units The measurement unit for the sonar device.","declarations":[{"spell":"1145:17-1145:25|35|2|1","param_spellings":["1145:41-1145:46"]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":151,"usr":5651259773832987290,"detailed_name":"void vex::sonar::changed(void (*)() callback)","short_name_offset":17,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Sonar.changed(changedFunction);}\r\n@brief Calls a function when the sonar value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"1154:19-1154:26|35|2|1","param_spellings":["1154:36-1154:44"]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":152,"usr":17292968289475524323,"detailed_name":"void vex::sonar::setMaximum(double distance, vex::distanceUnits units)","short_name_offset":17,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1159:19-1159:29|35|2|1","param_spellings":["1159:38-1159:46","1159:62-1159:67"]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":153,"usr":10344152488260141380,"detailed_name":"bool vex::sonar::foundObject()","short_name_offset":17,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief Gets an object is present in front of the sonar sensor\r\n@return Returns a boolean that will be true if the sonar sensor is detecting an object.","declarations":[{"spell":"1164:19-1164:30|35|2|1","param_spellings":[]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":154,"usr":1590640913873270897,"detailed_name":"void vex::sonar::setMinimum(double distance, vex::distanceUnits units)","short_name_offset":17,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1170:19-1170:29|35|2|1","param_spellings":["1170:38-1170:46","1170:62-1170:67"]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":155,"usr":9352960571017475229,"detailed_name":"void vex::pwm_out::pwm_out(triport::port &port)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::pwm_out Pwm_out = pwm_out(Brain.ThreeWirePort.A);}\r\n@brief Creates a new pwm-out object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1186:9-1186:16|36|2|1","param_spellings":["1186:33-1186:37"]}],"declaring_type":36,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":156,"usr":13837563659924262435,"detailed_name":"void vex::pwm_out::~pwm_out()","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1187:9-1187:17|36|2|1","param_spellings":[]}],"declaring_type":36,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":157,"usr":4069966580920200595,"detailed_name":"void vex::pwm_out::state(int32_t value, vex::percentUnits units)","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{PWM.state(10, percent);}\r\n@cpp_sig{PWM.state(10, vex::percentUnits::pct);}\r\n@brief Sets the state of the pwm device.\r\n@param value Sets the length of the pulse width.\r\n@param units The measurement unit for the state value.","declarations":[{"spell":"1198:14-1198:19|36|2|1","param_spellings":["1198:29-1198:34","1198:49-1198:54"]}],"declaring_type":36,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":158,"usr":3645305280785659476,"detailed_name":"void vex::servo::servo(triport::port &port)","short_name_offset":10,"short_name_size":5,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::servo Servo = vex::servo(Brain.ThreeWirePort.A);}\r\n@brief Creates a new servo object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1214:9-1214:14|37|2|1","param_spellings":["1214:31-1214:35"]}],"declaring_type":37,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":159,"usr":3348549978946911271,"detailed_name":"void vex::servo::~servo()","short_name_offset":17,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1215:9-1215:15|37|2|1","param_spellings":[]}],"declaring_type":37,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":160,"usr":3727581286278899088,"detailed_name":"void vex::servo::setPosition(int32_t value, vex::percentUnits units)","short_name_offset":17,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Servo.position(10, percent);}\r\n@cpp_sig{Servo.setPosition(10, vex::percentUnits::pct);}\r\n@brief Sets the position of the servo device.\r\n@param value Sets the amount of rotation.\r\n@param units The measurement unit for the rotation value.","declarations":[{"spell":"1226:14-1226:25|37|2|1","param_spellings":["1226:35-1226:40","1226:55-1226:60"]}],"declaring_type":37,"bases":[],"derived":[],"vars":[],"uses":["1248:11-1248:22|162|3|32"],"callees":[]},{"id":161,"usr":16425858289517841025,"detailed_name":"void vex::servo::setPosition(double value, vex::rotationUnits units)","short_name_offset":17,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Servo.setPosition(45, vex::rotationUnits::deg);}\r\n@brief Sets the position of the servo device.\r\n@param value Sets the amount of rotation.\r\n@param units The measurement unit for the rotation value.","declarations":[{"spell":"1236:14-1236:25|37|2|1","param_spellings":["1236:34-1236:39","1236:55-1236:60"]}],"declaring_type":37,"bases":[],"derived":[],"vars":[],"uses":["1261:11-1261:22|163|3|32"],"callees":[]},{"id":162,"usr":17768464977634555491,"detailed_name":"void vex::servo::startRotateTo(int32_t value, vex::percentUnits units)","short_name_offset":17,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Servo.startRotateTo(10, percent);}\r\n@cpp_sig{Servo.startRotateTo(10, vex::percentUnits::pct);}\r\n@brief Sets the position of the servo device.\r\n@param value Sets the amount of rotation.\r\n@param units The measurement unit for the rotation value.","declarations":[],"spell":"1247:14-1247:27|37|2|2","extent":"1247:9-1249:10|37|2|0","declaring_type":37,"bases":[],"derived":[],"vars":[64,65],"uses":[],"callees":["1248:11-1248:22|160|3|32"]},{"id":163,"usr":3313612058364052691,"detailed_name":"void vex::servo::startRotateTo(double value, vex::rotationUnits units)","short_name_offset":17,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Servo.startRotateTo(45, degrees);}\r\n@cpp_sig{Servo.startRotateTo(45, vex::rotationUnits::deg);}\r\n@brief Sets the position of the servo device.\r\n@param value Sets the amount of rotation.\r\n@param units The measurement unit for the rotation value.","declarations":[],"spell":"1260:14-1260:27|37|2|2","extent":"1260:9-1262:10|37|2|0","declaring_type":37,"bases":[],"derived":[],"vars":[66,67],"uses":[],"callees":["1261:11-1261:22|161|3|32"]},{"id":164,"usr":2508949147174121721,"detailed_name":"void vex::motor29::motor29(triport::port &port)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::motor29 Motor29 = vex::motor29(Brain.ThreeWirePort.A);}\r\n@brief Creates a new motor29 object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1283:9-1283:16|39|2|1","param_spellings":["1283:33-1283:37"]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":165,"usr":3463345531640218847,"detailed_name":"void vex::motor29::motor29(triport::port &port, bool reverse)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::motor29 Motor29 = vex::motor29(Brain.ThreeWirePort.A, true);}\r\n@brief Creates a new motor29 object on the port specified in the parameter.\r\n@param port A reference to a three wire port.\r\n@param reverse Sets the reverse flag for the new motor29 object.","declarations":[{"spell":"1293:9-1293:16|39|2|1","param_spellings":["1293:33-1293:37","1293:44-1293:51"]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":166,"usr":17739995577542975371,"detailed_name":"void vex::motor29::~motor29()","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1294:9-1294:17|39|2|1","param_spellings":[]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":167,"usr":14869516364703780020,"detailed_name":"void vex::motor29::setVelocity(double velocity, vex::percentUnits units)","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{Motor29.setVelocity(50, percent);}\r\n@cpp_sig{Motor29.setVelocity(50, vex::percentUnits::pct);}\r\n@brief Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor.  Any subsequent call that does not contain a specified motor velocity will use this value.\r\n@param velocity Sets the amount of velocity.\r\n@param units The measurement unit of the velocity value.","declarations":[{"spell":"1305:14-1305:25|39|2|1","param_spellings":["1305:34-1305:42","1305:57-1305:62"]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":168,"usr":12204245093605995404,"detailed_name":"void vex::motor29::setReversed(bool value)","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{Motor29.setReversed(true);}\r\n@brief Sets the motor mode to \"reverse\", which will make motor commands spin the motor in the opposite direction.\r\n@param value If set to true, the motor will spin in the reversed direction.","declarations":[{"spell":"1314:14-1314:25|39|2|1","param_spellings":["1314:32-1314:37"]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":169,"usr":4631538511979078561,"detailed_name":"void vex::motor29::spin(vex::directionType dir)","short_name_offset":19,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor29.spin(forward);}\r\n@cpp_sig{Motor29.spin(vex::directionType::fwd);}\r\n@brief Turns the motor on, and spins it in the specified direction.\r\n@param dir The direction to spin the motor.","declarations":[{"spell":"1324:14-1324:18|39|2|1","param_spellings":["1324:34-1324:37"]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":170,"usr":1583398685223506924,"detailed_name":"void vex::motor29::spin(vex::directionType dir, double velocity, vex::velocityUnits units)","short_name_offset":19,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor29.spin(vex::directionType::fwd,50,vex::velocityUnits::rpm);}\r\n@brief Turns on the motor and spins it in a specified direction and a specified velocity.\r\n@param dir The direction to spin the motor. \r\n@param velocity Sets the amount of velocity.\r\n@param units The measurement unit of the velocity value.","declarations":[{"spell":"1335:14-1335:18|39|2|1","param_spellings":["1335:34-1335:37","1335:46-1335:54","1335:70-1335:75"]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":["1338:13-1338:17|171|3|32"],"callees":[]},{"id":171,"usr":2967393704861848004,"detailed_name":"void vex::motor29::spin(vex::directionType dir, double velocity, vex::percentUnits units)","short_name_offset":19,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"1337:14-1337:18|39|2|2","extent":"1337:9-1339:10|39|2|0","declaring_type":39,"bases":[],"derived":[],"vars":[71,72,73],"uses":[],"callees":["1338:13-1338:17|170|3|32"]},{"id":172,"usr":2408979620127756034,"detailed_name":"void vex::motor29::stop()","short_name_offset":19,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor29.stop();}\r\n@brief Stops the motor using the default brake mode.","declarations":[{"spell":"1347:14-1347:18|39|2|1","param_spellings":[]}],"declaring_type":39,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":173,"usr":9429644616909034344,"detailed_name":"void vex::motor_victor::motor_victor(triport::port &port)","short_name_offset":10,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::motor_victor Motor_victor = vex::motor_victor(Brain.ThreeWirePort.A);}\r\n@brief Creates a new motor victor object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1368:9-1368:21|41|2|1","param_spellings":["1368:38-1368:42"]}],"declaring_type":41,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":174,"usr":17351085211636763054,"detailed_name":"void vex::motor_victor::motor_victor(triport::port &port, bool reverse)","short_name_offset":10,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::motor_victor Motor_victor = vex::motor_victor(Brain.ThreeWirePort.A);}\r\n@brief Creates a new motor victor object on the port specified in the parameter.\r\n@param port A reference to a three wire port.\r\n@param reverse Sets the reverse flag for the new motor_victor object.","declarations":[{"spell":"1378:9-1378:21|41|2|1","param_spellings":["1378:38-1378:42","1378:49-1378:56"]}],"declaring_type":41,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":175,"usr":18061427301836335082,"detailed_name":"void vex::motor_victor::~motor_victor()","short_name_offset":24,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1379:9-1379:22|41|2|1","param_spellings":[]}],"declaring_type":41,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":176,"usr":949139745843340728,"detailed_name":"void vex::motor_victor::setVelocity(double velocity, vex::percentUnits units)","short_name_offset":24,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{Motor_victor.setVelocity(50, percent);}\r\n@cpp_sig{Motor_victor.setVelocity(50, vex::percentUnits::pct);}\r\n@brief Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor.  Any subsequent call that does not contain a specified motor velocity will use this value.\r\n@param velocity Sets the amount of velocity.\r\n@param units The measurement unit of the velocity value.","declarations":[{"spell":"1390:14-1390:25|41|2|1","param_spellings":["1390:34-1390:42","1390:57-1390:62"]}],"declaring_type":41,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":177,"usr":13202273225213267058,"detailed_name":"void vex::motor_victor::setReversed(bool value)","short_name_offset":24,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{Motor_victor.setReversed(true);}\r\n@brief Sets the motor mode to \"reverse\", which will make motor commands spin the motor in the opposite direction.\r\n@param value If set to true, the motor will spin in the reversed direction.","declarations":[{"spell":"1399:14-1399:25|41|2|1","param_spellings":["1399:32-1399:37"]}],"declaring_type":41,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":178,"usr":4115722558282331593,"detailed_name":"void vex::motor_victor::spin(vex::directionType dir)","short_name_offset":24,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor_victor.spin(forward);}\r\n@cpp_sig{Motor_victor.spin(vex::directionType::fwd);}\r\n@brief Turns the motor on, and spins it in the specified direction.\r\n@param dir The direction to spin the motor.","declarations":[{"spell":"1409:14-1409:18|41|2|1","param_spellings":["1409:34-1409:37"]}],"declaring_type":41,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":179,"usr":5521210796766574824,"detailed_name":"void vex::motor_victor::spin(vex::directionType dir, double velocity, vex::velocityUnits units)","short_name_offset":24,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor_victor.spin(vex::directionType::fwd,50,vex::velocityUnits::rpm);}\r\n@brief Turns on the motor and spins it in a specified direction and a specified velocity.\r\n@param dir The direction to spin the motor. \r\n@param velocity Sets the amount of velocity.\r\n@param units The measurement unit of the velocity value.","declarations":[{"spell":"1420:14-1420:18|41|2|1","param_spellings":["1420:34-1420:37","1420:46-1420:54","1420:70-1420:75"]}],"declaring_type":41,"bases":[],"derived":[],"vars":[],"uses":["1423:13-1423:17|180|3|32"],"callees":[]},{"id":180,"usr":4040167837217059489,"detailed_name":"void vex::motor_victor::spin(vex::directionType dir, double velocity, vex::percentUnits units)","short_name_offset":24,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"1422:14-1422:18|41|2|2","extent":"1422:9-1424:10|41|2|0","declaring_type":41,"bases":[],"derived":[],"vars":[77,78,79],"uses":[],"callees":["1423:13-1423:17|179|3|32"]},{"id":181,"usr":16957085018948964338,"detailed_name":"void vex::motor_victor::stop()","short_name_offset":24,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor_victor.stop();}\r\n@brief Stops the motor using the default brake mode.","declarations":[{"spell":"1432:14-1432:18|41|2|1","param_spellings":[]}],"declaring_type":41,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":13050135369189023715,"detailed_name":"vex::triport::tEventType::EVENT_DIN_HIGH","short_name_offset":26,"short_name_size":14,"hover":"vex::triport::tEventType::EVENT_DIN_HIGH = 0","comments":"","declarations":[],"spell":"33:9-33:23|4|2|2","extent":"33:9-33:35|4|2|0","type":4,"uses":["214:88-214:102|12|2|4"],"kind":22,"storage":0},{"id":1,"usr":13326008633676446165,"detailed_name":"vex::triport::tEventType::EVENT_DIN_LOW","short_name_offset":26,"short_name_size":13,"hover":"vex::triport::tEventType::EVENT_DIN_LOW = 1","comments":"","declarations":[],"spell":"34:9-34:22|4|2|2","extent":"34:9-34:35|4|2|0","type":4,"uses":["215:88-215:101|12|2|4"],"kind":22,"storage":0},{"id":2,"usr":13801557040035454413,"detailed_name":"vex::triport::tEventType::EVENT_AIN_CHANGED","short_name_offset":26,"short_name_size":17,"hover":"vex::triport::tEventType::EVENT_AIN_CHANGED = 2","comments":"","declarations":[],"spell":"35:9-35:26|4|2|2","extent":"35:9-35:35|4|2|0","type":4,"uses":["216:88-216:105|12|2|4"],"kind":22,"storage":0},{"id":3,"usr":16115055909984283465,"detailed_name":"uint32_t vex::triport::_id","short_name_offset":23,"short_name_size":3,"hover":"uint32_t vex::triport::_id = 0","comments":"","declarations":[],"spell":"39:16-39:19|2|2|2","extent":"39:7-39:23|2|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":4,"usr":16354803154517788372,"detailed_name":"first port","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"45:28-45:32|2|3|2","extent":"45:22-45:32|2|3|0","uses":[],"kind":253,"storage":1},{"id":5,"usr":6203688047184047575,"detailed_name":"Args... args","short_name_offset":8,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"45:42-45:46|2|3|2","extent":"45:34-45:46|2|3|0","uses":[],"kind":253,"storage":1},{"id":6,"usr":108720344878271861,"detailed_name":"int32_t index","short_name_offset":8,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"61:24-61:29|9|3|2","extent":"61:16-61:29|9|3|0","type":9,"uses":[],"kind":253,"storage":1},{"id":7,"usr":8358401409672384491,"detailed_name":"Args... args","short_name_offset":8,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"61:39-61:43|9|3|2","extent":"61:31-61:43|9|3|0","uses":[],"kind":253,"storage":1},{"id":8,"usr":11569330319738348054,"detailed_name":"int32_t vex::triport::port::_id","short_name_offset":28,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"80:21-80:24|12|2|2","extent":"80:11-80:24|12|2|0","type":9,"uses":["86:20-86:23|14|3|4","214:109-214:112|12|2|4","215:109-215:112|12|2|4","216:109-216:112|12|2|4"],"kind":8,"storage":0},{"id":9,"usr":18069680756641107073,"detailed_name":"vex::triport *vex::triport::port::_parent","short_name_offset":34,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"81:22-81:29|12|2|2","extent":"81:11-81:29|12|2|0","type":2,"uses":["86:31-86:38|14|3|4","214:43-214:50|12|2|4","215:43-215:50|12|2|4","216:43-216:50|12|2|4"],"kind":8,"storage":0},{"id":10,"usr":17055785345163075011,"detailed_name":"const vex::triportType type","short_name_offset":23,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"157:46-157:50|26|3|2","extent":"157:28-157:50|26|3|0","type":6,"uses":["158:25-158:29|26|3|4"],"kind":253,"storage":1},{"id":11,"usr":16934549166881076088,"detailed_name":"const int32_t value","short_name_offset":14,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"160:41-160:46|27|3|2","extent":"160:27-160:46|27|3|0","type":9,"uses":["161:26-161:31|27|3|4"],"kind":253,"storage":1},{"id":12,"usr":8910779791458941181,"detailed_name":"vex::mevent vex::triport::port::PRESSED","short_name_offset":32,"short_name_size":7,"hover":"vex::mevent vex::triport::port::PRESSED   = { (uint32_t)_parent->_getIndex(), ((uint32_t)tEventType::EVENT_DIN_HIGH    + (_id<<2)) }","comments":"","declarations":[],"spell":"214:19-214:26|12|2|2","extent":"214:11-214:119|12|2|0","type":18,"uses":["218:31-218:38|12|2|4","297:36-297:43|13|2|4"],"kind":8,"storage":0},{"id":13,"usr":15389955698783924606,"detailed_name":"vex::mevent vex::triport::port::RELEASED","short_name_offset":32,"short_name_size":8,"hover":"vex::mevent vex::triport::port::RELEASED  = { (uint32_t)_parent->_getIndex(), ((uint32_t)tEventType::EVENT_DIN_LOW     + (_id<<2)) }","comments":"","declarations":[],"spell":"215:19-215:27|12|2|2","extent":"215:11-215:119|12|2|0","type":18,"uses":["219:31-219:39|12|2|4","298:36-298:44|13|2|4"],"kind":8,"storage":0},{"id":14,"usr":16168570386645455610,"detailed_name":"vex::mevent vex::triport::port::CHANGED","short_name_offset":32,"short_name_size":7,"hover":"vex::mevent vex::triport::port::CHANGED   = { (uint32_t)_parent->_getIndex(), ((uint32_t)tEventType::EVENT_AIN_CHANGED + (_id<<2)) }","comments":"","declarations":[],"spell":"216:19-216:26|12|2|2","extent":"216:11-216:119|12|2|0","type":18,"uses":["299:36-299:43|13|2|4"],"kind":8,"storage":0},{"id":15,"usr":6287274931713025569,"detailed_name":"vex::mevent &vex::triport::port::HIGH","short_name_offset":33,"short_name_size":4,"hover":"vex::mevent &vex::triport::port::HIGH     = PRESSED","comments":"","declarations":[],"spell":"218:20-218:24|12|2|2","extent":"218:11-218:38|12|2|0","type":18,"uses":["300:36-300:40|13|2|4"],"kind":8,"storage":0},{"id":16,"usr":9860440264544795197,"detailed_name":"vex::mevent &vex::triport::port::LOW","short_name_offset":33,"short_name_size":3,"hover":"vex::mevent &vex::triport::port::LOW      = RELEASED","comments":"","declarations":[],"spell":"219:20-219:23|12|2|2","extent":"219:11-219:39|12|2|0","type":18,"uses":["301:36-301:39|13|2|4"],"kind":8,"storage":0},{"id":17,"usr":5147521078109537289,"detailed_name":"vex::triport::port [8] vex::triport::Port","short_name_offset":37,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"224:12-224:16|2|2|2","extent":"224:7-232:23|2|2|0","type":12,"uses":["242:18-242:22|2|2|4","248:18-248:22|2|2|4","254:18-254:22|2|2|4","260:18-260:22|2|2|4","266:18-266:22|2|2|4","272:18-272:22|2|2|4","278:18-278:22|2|2|4","284:18-284:22|2|2|4"],"kind":8,"storage":0},{"id":18,"usr":6022357643659404472,"detailed_name":"vex::triport::port &vex::triport::A","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::A = Port[0]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as A on the Brain.","declarations":[],"spell":"242:14-242:15|2|2|2","extent":"242:7-242:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":19,"usr":12353844188789262999,"detailed_name":"vex::triport::port &vex::triport::B","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::B = Port[1]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as B on the Brain.","declarations":[],"spell":"248:14-248:15|2|2|2","extent":"248:7-248:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":20,"usr":5713690696216866844,"detailed_name":"vex::triport::port &vex::triport::C","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::C = Port[2]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as C on the Brain.","declarations":[],"spell":"254:14-254:15|2|2|2","extent":"254:7-254:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":21,"usr":750259209699402755,"detailed_name":"vex::triport::port &vex::triport::D","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::D = Port[3]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as D on the Brain.","declarations":[],"spell":"260:14-260:15|2|2|2","extent":"260:7-260:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":22,"usr":7104566130567617180,"detailed_name":"vex::triport::port &vex::triport::E","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::E = Port[4]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as E on the Brain.","declarations":[],"spell":"266:14-266:15|2|2|2","extent":"266:7-266:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":23,"usr":3330068417595126656,"detailed_name":"vex::triport::port &vex::triport::F","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::F = Port[5]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as F on the Brain.","declarations":[],"spell":"272:14-272:15|2|2|2","extent":"272:7-272:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":24,"usr":18089155573520437523,"detailed_name":"vex::triport::port &vex::triport::G","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::G = Port[6]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as G on the Brain.","declarations":[],"spell":"278:14-278:15|2|2|2","extent":"278:7-278:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":25,"usr":9706211901558078131,"detailed_name":"vex::triport::port &vex::triport::H","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::H = Port[7]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as H on the Brain.","declarations":[],"spell":"284:14-284:15|2|2|2","extent":"284:7-284:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":26,"usr":3631442292982244862,"detailed_name":"triport::port &vex::__tridevice::_port","short_name_offset":33,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"292:26-292:31|13|2|2","extent":"292:9-292:31|13|2|0","type":12,"uses":["297:30-297:35|13|2|4","298:30-298:35|13|2|4","299:30-299:35|13|2|4","300:30-300:35|13|2|4","301:30-301:35|13|2|4"],"kind":8,"storage":0},{"id":27,"usr":6860498277106925465,"detailed_name":"vex::mevent &vex::__tridevice::_PRESSED","short_name_offset":31,"short_name_size":8,"hover":"vex::mevent &vex::__tridevice::_PRESSED   = _port.PRESSED","comments":"","declarations":[],"spell":"297:17-297:25|13|2|2","extent":"297:9-297:43|13|2|0","type":18,"uses":["366:29-366:37|19|2|4","425:29-425:37|20|2|4"],"kind":8,"storage":0},{"id":28,"usr":9503637556782317327,"detailed_name":"vex::mevent &vex::__tridevice::_RELEASED","short_name_offset":31,"short_name_size":9,"hover":"vex::mevent &vex::__tridevice::_RELEASED  = _port.RELEASED","comments":"","declarations":[],"spell":"298:17-298:26|13|2|2","extent":"298:9-298:44|13|2|0","type":18,"uses":["367:29-367:38|19|2|4","426:29-426:38|20|2|4"],"kind":8,"storage":0},{"id":29,"usr":5733532014542949696,"detailed_name":"vex::mevent &vex::__tridevice::_CHANGED","short_name_offset":31,"short_name_size":8,"hover":"vex::mevent &vex::__tridevice::_CHANGED   = _port.CHANGED","comments":"","declarations":[],"spell":"299:17-299:25|13|2|2","extent":"299:9-299:43|13|2|0","type":18,"uses":["664:29-664:37|25|2|4","716:29-716:37|27|2|4","769:29-769:37|28|2|4","915:29-915:37|29|2|4","971:29-971:37|31|2|4","1024:29-1024:37|33|2|4","1107:29-1107:37|34|2|4","1156:29-1156:37|35|2|4"],"kind":8,"storage":0},{"id":30,"usr":7332950105196548259,"detailed_name":"vex::mevent &vex::__tridevice::_HIGH","short_name_offset":31,"short_name_size":5,"hover":"vex::mevent &vex::__tridevice::_HIGH      = _port.HIGH","comments":"","declarations":[],"spell":"300:17-300:22|13|2|2","extent":"300:9-300:40|13|2|0","type":18,"uses":["478:29-478:34|21|2|4"],"kind":8,"storage":0},{"id":31,"usr":18294739802784724953,"detailed_name":"vex::mevent &vex::__tridevice::_LOW","short_name_offset":31,"short_name_size":4,"hover":"vex::mevent &vex::__tridevice::_LOW       = _port.LOW","comments":"","declarations":[],"spell":"301:17-301:21|13|2|2","extent":"301:9-301:39|13|2|0","type":18,"uses":["477:29-477:33|21|2|4"],"kind":8,"storage":0},{"id":32,"usr":8698287612528078346,"detailed_name":"vex::mevent &vex::limit::PRESSED","short_name_offset":25,"short_name_size":7,"hover":"vex::mevent &vex::limit::PRESSED   = _PRESSED","comments":"","declarations":[],"spell":"366:17-366:24|19|2|2","extent":"366:9-366:37|19|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":33,"usr":1249823126084308175,"detailed_name":"vex::mevent &vex::limit::RELEASED","short_name_offset":25,"short_name_size":8,"hover":"vex::mevent &vex::limit::RELEASED  = _RELEASED","comments":"","declarations":[],"spell":"367:17-367:25|19|2|2","extent":"367:9-367:38|19|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":34,"usr":15259598941190089326,"detailed_name":"vex::mevent &vex::bumper::PRESSED","short_name_offset":26,"short_name_size":7,"hover":"vex::mevent &vex::bumper::PRESSED   = _PRESSED","comments":"","declarations":[],"spell":"425:17-425:24|20|2|2","extent":"425:9-425:37|20|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":35,"usr":6958973023128549130,"detailed_name":"vex::mevent &vex::bumper::RELEASED","short_name_offset":26,"short_name_size":8,"hover":"vex::mevent &vex::bumper::RELEASED  = _RELEASED","comments":"","declarations":[],"spell":"426:17-426:25|20|2|2","extent":"426:9-426:38|20|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":36,"usr":13850597790520333191,"detailed_name":"vex::mevent &vex::digital_in::HIGH","short_name_offset":30,"short_name_size":4,"hover":"vex::mevent &vex::digital_in::HIGH     = _LOW","comments":"","declarations":[],"spell":"477:18-477:22|21|2|2","extent":"477:9-477:33|21|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":37,"usr":945695254773085945,"detailed_name":"vex::mevent &vex::digital_in::LOW","short_name_offset":30,"short_name_size":3,"hover":"vex::mevent &vex::digital_in::LOW      = _HIGH","comments":"","declarations":[],"spell":"478:18-478:21|21|2|2","extent":"478:9-478:34|21|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":38,"usr":5295702372863452232,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"632:39-632:44|81|3|2","extent":"632:26-632:44|81|3|0","type":26,"uses":[],"kind":253,"storage":1},{"id":39,"usr":15095542392506504909,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["633:38-633:41|81|3|4","704:38-704:41|90|3|4","757:38-757:41|96|3|4","824:38-824:41|103|3|4","953:38-953:41|127|3|4","1012:38-1012:41|133|3|4"],"kind":0,"storage":0},{"id":40,"usr":18040015574497405451,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"vex::percentUnits units = percentUnits::pct","comments":"","declarations":[],"spell":"636:39-636:44|82|3|2","extent":"636:26-636:64|82|3|0","type":26,"uses":["637:25-637:30|82|3|4"],"kind":253,"storage":1},{"id":41,"usr":15469155046794050759,"detailed_name":"vex::rotationUnits units","short_name_offset":19,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"651:40-651:45|84|3|2","extent":"651:26-651:45|84|3|0","type":15,"uses":["652:25-652:30|84|3|4"],"kind":253,"storage":1},{"id":42,"usr":8196411086303142654,"detailed_name":"vex::mevent &vex::pot::CHANGED","short_name_offset":23,"short_name_size":7,"hover":"vex::mevent &vex::pot::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"664:17-664:24|25|2|2","extent":"664:9-664:37|25|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":43,"usr":15447115824431573710,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["692:68-692:71|27|2|4","745:66-745:69|28|2|4"],"kind":0,"storage":0},{"id":44,"usr":7141365509226220721,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"703:39-703:44|90|3|2","extent":"703:26-703:44|90|3|0","type":26,"uses":[],"kind":253,"storage":1},{"id":45,"usr":13738407683588204287,"detailed_name":"vex::mevent &vex::line::CHANGED","short_name_offset":24,"short_name_size":7,"hover":"vex::mevent &vex::line::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"716:17-716:24|27|2|2","extent":"716:9-716:37|27|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":46,"usr":10145821801730804959,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"756:39-756:44|96|3|2","extent":"756:26-756:44|96|3|0","type":26,"uses":[],"kind":253,"storage":1},{"id":47,"usr":14867530165869800149,"detailed_name":"vex::mevent &vex::light::CHANGED","short_name_offset":25,"short_name_size":7,"hover":"vex::mevent &vex::light::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"769:17-769:24|28|2|2","extent":"769:9-769:37|28|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":48,"usr":8782739445128610863,"detailed_name":"int32_t vex::gyro::_offset_h","short_name_offset":19,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"777:25-777:34|29|2|2","extent":"777:9-777:34|29|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":49,"usr":16122333557606758284,"detailed_name":"int32_t vex::gyro::_offset_r","short_name_offset":19,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"778:25-778:34|29|2|2","extent":"778:9-778:34|29|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":50,"usr":1449485204797790388,"detailed_name":"uint32_t vex::gyro::_cal_delay","short_name_offset":20,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"779:25-779:35|29|2|2","extent":"779:9-779:35|29|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":51,"usr":15158188604782931795,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"823:39-823:44|103|3|2","extent":"823:26-823:44|103|3|0","type":26,"uses":[],"kind":253,"storage":1},{"id":52,"usr":12170800071991654591,"detailed_name":"int32_t value","short_name_offset":8,"short_name_size":5,"hover":"int32_t value = 0","comments":"","declarations":[],"spell":"836:38-836:43|105|3|2","extent":"836:30-836:47|105|3|0","type":9,"uses":["837:29-837:34|105|3|4"],"kind":253,"storage":1},{"id":53,"usr":1126757257207621049,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["892:63-892:66|29|2|4","899:65-899:68|29|2|4","906:66-906:69|29|2|4"],"kind":0,"storage":0},{"id":54,"usr":2638745284551699160,"detailed_name":"vex::mevent &vex::gyro::CHANGED","short_name_offset":24,"short_name_size":7,"hover":"vex::mevent &vex::gyro::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"915:17-915:24|29|2|2","extent":"915:9-915:37|29|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":55,"usr":13770383754832458553,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"952:39-952:44|127|3|2","extent":"952:26-952:44|127|3|0","type":26,"uses":[],"kind":253,"storage":1},{"id":56,"usr":10991056972410635462,"detailed_name":"vex::mevent &vex::accelerometer::CHANGED","short_name_offset":33,"short_name_size":7,"hover":"vex::mevent &vex::accelerometer::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"971:17-971:24|31|2|2","extent":"971:9-971:37|31|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":57,"usr":12071227507881041749,"detailed_name":"bool vex::accelerometer::highSensitivity","short_name_offset":25,"short_name_size":15,"hover":"","comments":"","declarations":[],"spell":"974:19-974:34|31|2|2","extent":"974:11-974:34|31|2|0","type":32,"uses":[],"kind":8,"storage":0},{"id":58,"usr":597958213419075404,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1011:39-1011:44|133|3|2","extent":"1011:26-1011:44|133|3|0","type":26,"uses":[],"kind":253,"storage":1},{"id":59,"usr":9159364262388130210,"detailed_name":"vex::mevent &vex::analog_in::CHANGED","short_name_offset":29,"short_name_size":7,"hover":"vex::mevent &vex::analog_in::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"1024:17-1024:24|33|2|2","extent":"1024:9-1024:37|33|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":60,"usr":9756895979848178309,"detailed_name":"vex::mevent &vex::encoder::CHANGED","short_name_offset":27,"short_name_size":7,"hover":"vex::mevent &vex::encoder::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"1107:17-1107:24|34|2|2","extent":"1107:9-1107:37|34|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":61,"usr":4032262108504887027,"detailed_name":"vex::mevent &vex::sonar::CHANGED","short_name_offset":25,"short_name_size":7,"hover":"vex::mevent &vex::sonar::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"1156:17-1156:24|35|2|2","extent":"1156:9-1156:37|35|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":62,"usr":10209985066159285990,"detailed_name":"uint32_t vex::sonar::_maxdistance","short_name_offset":21,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"1167:19-1167:31|35|2|2","extent":"1167:9-1167:31|35|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":63,"usr":5477204353248620706,"detailed_name":"uint32_t vex::sonar::_mindistance","short_name_offset":21,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"1168:19-1168:31|35|2|2","extent":"1168:9-1168:31|35|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":64,"usr":1139231666245168801,"detailed_name":"int32_t value","short_name_offset":8,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1247:37-1247:42|162|3|2","extent":"1247:29-1247:42|162|3|0","type":9,"uses":["1248:23-1248:28|162|3|4"],"kind":253,"storage":1},{"id":65,"usr":114047978308322068,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1247:57-1247:62|162|3|2","extent":"1247:44-1247:62|162|3|0","type":26,"uses":["1248:30-1248:35|162|3|4"],"kind":253,"storage":1},{"id":66,"usr":8688084410083041670,"detailed_name":"double value","short_name_offset":7,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1260:36-1260:41|163|3|2","extent":"1260:29-1260:41|163|3|0","type":38,"uses":["1261:23-1261:28|163|3|4"],"kind":253,"storage":1},{"id":67,"usr":12107199462587431476,"detailed_name":"vex::rotationUnits units","short_name_offset":19,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1260:57-1260:62|163|3|2","extent":"1260:43-1260:62|163|3|0","type":15,"uses":["1261:30-1261:35|163|3|4"],"kind":253,"storage":1},{"id":68,"usr":3697118674078239620,"detailed_name":"bool vex::motor29::_reversed","short_name_offset":19,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1270:17-1270:26|39|2|2","extent":"1270:9-1270:26|39|2|0","type":32,"uses":[],"kind":8,"storage":0},{"id":69,"usr":4933083743260474487,"detailed_name":"int32_t vex::motor29::_velocity","short_name_offset":22,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1271:17-1271:26|39|2|2","extent":"1271:9-1271:26|39|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":70,"usr":15897678743678359575,"detailed_name":"bool vex::motor29::_spinMode","short_name_offset":19,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1272:17-1272:26|39|2|2","extent":"1272:9-1272:26|39|2|0","type":32,"uses":[],"kind":8,"storage":0},{"id":71,"usr":1568381697177627343,"detailed_name":"vex::directionType dir","short_name_offset":19,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1337:34-1337:37|171|3|2","extent":"1337:20-1337:37|171|3|0","type":40,"uses":["1338:19-1338:22|171|3|4"],"kind":253,"storage":1},{"id":72,"usr":17923315459840306073,"detailed_name":"double velocity","short_name_offset":7,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1337:46-1337:54|171|3|2","extent":"1337:39-1337:54|171|3|0","type":38,"uses":["1338:24-1338:32|171|3|4"],"kind":253,"storage":1},{"id":73,"usr":11056088894724966485,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1337:69-1337:74|171|3|2","extent":"1337:56-1337:74|171|3|0","type":26,"uses":["1338:61-1338:66|171|3|4"],"kind":253,"storage":1},{"id":74,"usr":4518713813949052812,"detailed_name":"bool vex::motor_victor::_reversed","short_name_offset":24,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1355:17-1355:26|41|2|2","extent":"1355:9-1355:26|41|2|0","type":32,"uses":[],"kind":8,"storage":0},{"id":75,"usr":12241201190203776052,"detailed_name":"int32_t vex::motor_victor::_velocity","short_name_offset":27,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1356:17-1356:26|41|2|2","extent":"1356:9-1356:26|41|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":76,"usr":15599322639031159995,"detailed_name":"bool vex::motor_victor::_spinMode","short_name_offset":24,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1357:17-1357:26|41|2|2","extent":"1357:9-1357:26|41|2|0","type":32,"uses":[],"kind":8,"storage":0},{"id":77,"usr":4401398531906321416,"detailed_name":"vex::directionType dir","short_name_offset":19,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1422:34-1422:37|180|3|2","extent":"1422:20-1422:37|180|3|0","type":40,"uses":["1423:19-1423:22|180|3|4"],"kind":253,"storage":1},{"id":78,"usr":10113695747607919292,"detailed_name":"double velocity","short_name_offset":7,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1422:46-1422:54|180|3|2","extent":"1422:39-1422:54|180|3|0","type":38,"uses":["1423:24-1423:32|180|3|4"],"kind":253,"storage":1},{"id":79,"usr":2185835900881036354,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1422:69-1422:74|180|3|2","extent":"1422:56-1422:74|180|3|0","type":26,"uses":["1423:61-1423:66|180|3|4"],"kind":253,"storage":1},{"id":80,"usr":5548408262406674352,"detailed_name":"VEX_TRIPORT_CLASS_H","short_name_offset":0,"short_name_size":19,"hover":"#define VEX_TRIPORT_CLASS_H","comments":"","declarations":[],"spell":"20:11-20:30|-1|1|2","extent":"20:11-20:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":81,"usr":291038054068649371,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["86:39-86:43|-1|1|4"],"kind":0,"storage":0}]}